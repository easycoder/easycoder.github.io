!   Help Manager

    script HelpManager

    import div Container

    div Player
    callback DecoratorCallback
    a Link
    variable Mobile
    variable Page
    variable Content
    variable Payload
    variable ImageCount
    variable LinkCount
    variable HasEmbed
    variable Embed
    variable Function
    variable Data
    variable Source
    variable Style
    variable Item
    variable Len
    variable N
    variable IsHome
    variable CDN

    get IsHome from storage as `.ishome`
    get CDN from storage as `.cdn`

    if portrait
    begin
      	if mobile set Mobile else clear Mobile
    end
    
    set style `position` of Container to `relative`
    set style `padding` of Container to `0 1em`
    set style `overflow-y` of Container to `scroll`
    
    load showdown
  	on DecoratorCallback go to Decorate

    on message
    begin
    	if the message is `stop`
        begin
        	if HasEmbed iwsy stop
        end
    	else go to Show
    end
    set ready
    stop

Show:
    set style `display` of Container to `block`
    get Page from storage as `.help`
GetPage:
	clear HasEmbed
    if Page is empty
    begin
    	put `iwsy` into Page
        put Page into storage as `.help`
    end
	put 0 into ImageCount
	put 0 into LinkCount
    iwsy remove styles
    rest get Content from CDN cat `/resources/help/` cat Page cat `.md?v=` cat now
    or begin
    	put empty into Page
        go to GetPage
    end
    put Page into storage as `.help`
    set the content of Container to showdown decode Content with DecoratorCallback
    scroll Container to 0
    set the elements of Link to LinkCount
    put 0 into N
    while N is less than LinkCount
    begin
    	index Link to N
        attach Link to `ec-link-` cat N
    	add 1 to N
    end
    on click Link
    begin
    	if HasEmbed iwsy stop
    	put attribute `data-page` of Link into Page
    	go to GetPage
    end
    if HasEmbed
    begin
    	attach Player to `iwsy-embed`
        put attribute `data-url` of Player into Data
        rest get Embed from Data cat `?v=` cat now
        put the position of the last `/` in Data into N
        add 1 to N
        put left N of Data into Data
    	iwsy load Player Embed
        iwsy path Data
        iwsy run
    end
    stop

!------------------------------------------------------------------------------
!	This is the Showdown extension.

!	Decorate is called for every occurrence of ~...~ in the topic data
Decorate:
    put the payload of DecoratorCallback into Payload
    if Payload is `iwsy` put `<img src="` cat CDN cat `/resources/icon/iwsy.png?v=` cat now cat `" `
    	cat `style="height:0.8em;position:relative;top:0.1em" />` into Payload
    else if Payload is `clear` put `<div style="height:1px;clear:both"></div>` into Payload
    else
    begin
        put the position of `:` in Payload into N
        if N is greater than 0
        begin
            put left N of Payload into Function
            add 1 to N
            put from N of Payload into Data
            if Function is `m`
            	put `<span style="font-family:monospace;color:darkred">` cat Data cat `</span>` into Payload
            else if Function is `img` gosub to ProcessImage
            else if Function is `page` gosub to ProcessPage
            else if Function is `embed` gosub to ProcessEmbed
        end
    end
    set the payload of DecoratorCallback to Payload
    stop

!	Process an image, including positioning and class information
ProcessImage:
	put the position of `|` in Data into N
    if N is -1
    begin
        put `<img id="ec-image-` cat ImageCount cat `" src="` cat Data cat `?v=` cat now cat `" />` into Payload
        add 1 to ImageCount
        return
    end
    put left N of Data into Source
    add 1 to N
    put from N of Data into Data
    json split Data on `,` into Data
    put empty into Style
    put 0 into N
    while N is less than the json count of Data
    begin
    	put element N of Data into Item
        if Item is `left` put Style cat `float:left;` into Style
        else if Item is `right` put Style cat `float:right;` into Style
        else if Item is `center` put Style cat `margin:0 auto;` into Style
        else if Item is `border` put Style cat `padding:2px;border:1px solid black;` into Style
        else if Item is `clear` put Style cat `clear:both;` into Style
        else if Item is `icon` put Style cat `height:0.9em;position:relative;top:0.05em` into Style
        else if right 1 of Item is `%` put Style cat `width:` cat Item cat `;` into Style
        else
        begin
        	if left 1 of Item is not `{` go to NextItem
            if right 1 of Item is not `}` go to NextItem
            put from 1 of Item into Item
        	put the length of Item into Len
            take 1 from Len
            put left Len of Item into Item
            put Style cat Item cat `;` into Style
        end
    NextItem:
    	add 1 to N
    end
    put `<img id="ec-image-` cat ImageCount cat `" src="` cat Source
    	cat `?v=` cat now cat `" style="` cat Style cat `" />` into Payload
    add 1 to ImageCount
    return

!	Process a request for a new page
ProcessPage:
	put the position of `:` in Data into N
    if N is -1 return
    put left N of Data into Page
    add 1 to N
    put from N of Data into Data
	put `<a id="ec-link-` cat LinkCount cat `" href="#" data-page="` cat Page
    	cat `">` cat Data cat `</a>` into Payload
    add 1 to LinkCount
    return

!	Process a request for an embedded presentation
ProcessEmbed:
	put `<div id="iwsy-embed" data-url="` cat Data cat `" style "width:100%"></div>` into Payload
    set HasEmbed
	return

Exit:
    set style `display` of Container to `none`
    stop