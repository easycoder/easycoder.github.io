!	Steps

	script Steps
    
    import div Container and variable Presentation
    
    div Panel
    div StepsPanel
    div BlockTable
    div BlockRow
    div BlockData
    div Row
    div Row1
    div Cell
    div Editor
    div Title
    div Empty
    hr HR
    button StepButton
    button Header
    button InsertBefore
    button Save
    button InsertAfter
    table Table
    tr TR
    td TD
    select ActionSelect
    select DisplaySelect
    select BlockSelect
    select ContentSelect
    select TargetSelect
    select ContinueSelect
    select ChainSelect
    input InitInput
    input TitleInput
    input LabelInput
    input DurationInput
    input TargetInput
    input URLInput
    textarea InitCSS
    img AddStep
    img Up
    img UpContent
    img PlusIcon
    img DeleteContent
    img DeleteStep
    img ShowStep
    a Link
    variable Static
    variable IsHome
    variable CDN
    variable Steps
    variable Step
    variable Step2
    variable SelectedStep
    variable CurrentStep
    variable Action
    variable Blocks
    variable Block
    variable Defaults
    variable Contents
    variable Content
    variable Target
    variable Duration
    variable URL
    variable Names
    variable Name
    variable Name2
    variable Item
    variable Mode
    variable ActionNames
    variable InitProperties
    variable InitProperty
    variable BlockNames
    variable ContentNames
    variable DisplayTypes
    variable ContinueTypes
    variable ChainNames
    variable Options
    variable Response
    variable Message
    variable Running
    variable SavedIndex
    variable TargetText
    variable Email
    variable Password
    variable AdminPassword
    variable Valid
    variable UserHome
    variable Files
    variable FileCount
    variable UserRecord
    variable N
    variable B

    put -1 into SelectedStep

    get Static from storage as `.static`
    get IsHome from storage as `.ishome`
    get CDN from storage as `.cdn`

	clear Container
    create Panel in Container
    set the style of Panel to `width:100%;height:100%;display:flex;flex-direction:column`
    create StepsPanel in Panel
	set the style of StepsPanel to `flex:1;overflow-y:scroll`
    
    on message go to Start
    set ready
    stop
    
Start:
    if the message is empty go to Start2

	put the message into Message
    gosub to SetupArrays
    if Message is `save`
    begin
    	if SelectedStep is not -1
        begin
	        gosub to SaveCurrentStep
	        put -1 into SelectedStep
        end
        stop
    end
    if property `action` of Message is `clear`
    begin
    	clear Running
    	put 0 into N
        while N is less than the elements of StepButton
        begin
    	    index StepButton to N
        	set style `background-color` of StepButton to `#eee`
            add 1 to N
    	end
        stop
    end
    if property `action` of Message is `running`
    begin
    	set Running
    	stop
    end
    if property `action` of Message is `step`
    begin
    	put property `step` of Message into N
        if N is less than the json count of Steps
        begin
	        index StepButton to N
    	    set style `background-color` of StepButton to `#cfc`
    	end
        stop
    end

Start2:
    gosub to SetupArrays
	set style `display` of Panel to `flex`
	set style `flex-direction` of Panel to `column`
	clear StepsPanel
    create Row in StepsPanel
    set the style of Row to `display:flex`
    create Title in Row
    set the style of Title to
    	`flex:1;font-size:110%;font-weight:bold;background:lightgray;text-align:center;margin-bottom:0.5em`
    set the content of Title to `Steps`
    create Cell in Row
    set the style of Cell to `width:1.4em;text-align:center`
    create Link in Cell
    create AddStep in Link
    set the style of AddStep to `width:1em;margin-top:0.1em`
    set attribute `src` of AddStep to CDN cat `/resources/icon/plus.png`
    on click AddStep go to AddNewStep

	gosub to SetupArrays
    put 0 into N
    while N is less than the json count of Steps
    begin
    	index StepButton to N
    	create Row in StepsPanel
        set the style of Row to `width:100%`
        create Row1 in Row
        set the style of Row1 to `display:flex;margin-bottom:0.2em`
        create Cell in Row1
        set the style of Cell to `width:1.4em;text-align:center`
        create Link in Cell
    	index ShowStep to N
        create ShowStep in Link
        set the style of ShowStep to `width:1em;margin-top:0.1em`
        set attribute `src` of ShowStep to CDN cat `/resources//icon/binoculars.png`
    	create StepButton in Row1
        set the style of StepButton to `flex:1`
        put element N of Steps into CurrentStep
        set the text of StepButton to property `title` of CurrentStep
        create Cell in Row1
        if N is less than 2
        begin
            create Empty in Cell
            set the style of Empty to `width:1em;margin:0.2em 0 0 0.2em`
        end
        else
        begin
            create Link in Cell
            index Up to N
            create Up in Link
            set the style of Up to `width:1em;margin:0.2em 0 0 0.2em`
            set attribute `src` of Up to `/resources/icon/up.png`
        end
        create Cell in Row1
        if N is 0
        begin
            create Empty in Cell
            set the style of Empty to `width:1.4em;margin-top:0.1em`
        end
        else
        begin
            set the style of Cell to `width:1.4em;text-align:center`
            index DeleteStep to N
            create Link in Cell
            create DeleteStep in Link
            set the style of DeleteStep to `width:1em;margin-top:0.1em`
            set attribute `src` of DeleteStep to `/resources/icon/stop.png`
        end
        index Editor to N
        create Editor in Row
        if N is 0
        begin
        	create HR in StepsPanel
        end
    	add 1 to N
	end
    on click StepButton
    begin
    	put the index of StepButton into SavedIndex
       	gosub to SaveCurrentStep
    	put SelectedStep into N
        put SavedIndex into SelectedStep
        if SelectedStep is N
        begin
            index Editor to N
            set style `display` of Editor to `none`
            index StepButton to N
            set style `background-color` of StepButton to `#eee`
        	gosub to SaveCurrentStep
            put -1 into SelectedStep
        end
        else
        begin
            if N is not -1
            begin
                put 0 into N
                while N is less than the elements of StepButton
                begin
                    index Editor to N
                    set style `display` of Editor to `none`
                    index StepButton to N
                    set style `background-color` of StepButton to `#eee`
                    add 1 to N
                end
            end
            index StepButton to SelectedStep
            set style `background-color` of StepButton to `lightgray`
            index Editor to SelectedStep
            set style `display` of Editor to `block`
            put element SelectedStep of Steps into CurrentStep
            go to EditStep
      	end
    end
    on click Up
    begin
    	put the index of Up into N
        put element N of Steps into Step
        take 1 from N
        put element N of Steps into Step2
        set element N of Steps to Step
        add 1 to N
        set element N of Steps to Step2
        set property `steps` of Presentation to Steps
        go to Restart
    end
    on click DeleteStep
    begin
    	put the index of DeleteStep into N
        json delete element N of Steps
    	set property `steps` of Presentation to Steps
        put -1 into SelectedStep
        go to Restart
    end
    on click ShowStep
    begin
    	if Running stop
    	put 0 into N
        while N is less than the json count of Steps
        begin
        	index StepButton to N
        	set style `background-color` of StepButton to `#eee`
        	add 1 to N
        end
    	put the index of ShowStep into N
        index StepButton to N
        set style `background-color` of StepButton to `#ccf`
        set Message to object
        set property `action` of Message to `goto`
        set property `index` of Message to N
        send Message to parent
    end

!	Set up the fixed lists
    set ActionNames to array
    json add `noop` to ActionNames
    json add `set content` to ActionNames
    json add `show` to ActionNames
    json add `hide` to ActionNames
    json add `pause` to ActionNames
    json add `fade up` to ActionNames
    json add `fade down` to ActionNames
    json add `animate` to ActionNames
    json add `crossfade` to ActionNames
    json add `transition` to ActionNames
    json add `goto` to ActionNames
!    json add `load` to ActionNames
    json add `chain` to ActionNames
    set InitProperties to array
    json add `aspect ratio` to InitProperties
    json add `background` to InitProperties
    json add `border` to InitProperties
    json add `css` to InitProperties
    set DisplayTypes to array
    json add `block` to DisplayTypes
    json add `hidden` to DisplayTypes
    set ContinueTypes to array
    json add `yes` to ContinueTypes
    json add `no` to ContinueTypes
    
    put property `steps` of Presentation into Steps
    put -1 into SelectedStep
    clear Running
    
    stop

!	Set up all the arrays
SetupArrays:
	put property `steps` of Presentation into Steps
    put the json count of Steps into N
    set the elements of ShowStep to N
    set the elements of StepButton to N
    set the elements of Up to N
    set the elements of DeleteStep to N
    set the elements of TitleInput to N
    set the elements of LabelInput to N
    set the elements of DurationInput to N
    set the elements of URLInput to N
    set the elements of TargetInput to N
    set the elements of ChainSelect to N
    set the elements of DisplaySelect to N
    set the elements of ContinueSelect to N
    set the elements of Editor to N
    put property `blocks` of Presentation into Blocks
    put property `content` of Presentation into Contents
    return

!	Add a new step to the list
AddNewStep:
	gosub to CreateNewStep
    json add CurrentStep to Steps
    go to ASA3

!	Add a step before the current one
AddStepBefore:
    put the json count of Steps into N
    set CurrentStep to object
    json add CurrentStep to Steps
    go to ASA2

!	Add a step after the current one
AddStepAfter:
    put the json count of Steps into N
    set CurrentStep to object
    json add CurrentStep to Steps
    add 1 to SelectedStep
ASA2:
    while N is greater than SelectedStep
    begin
    	take 1 from N
        put element N of Steps into CurrentStep
        add 1 to N
        set element N of Steps to CurrentStep
        take 1 from N
    end
    gosub to CreateNewStep
    set element SelectedStep of Steps to CurrentStep
ASA3:
    set property `steps` of Presentation to Steps

Restart:
	set Message to object
    set property `action` of Message to `refresh`
    send Message to parent
    go to Start2

CreateNewStep:
    set CurrentStep to object
    set property `title` of CurrentStep to `New step`
    set property `action` of CurrentStep to ``
    set property `label` of CurrentStep to ``
	return

!	Edit a single step
EditStep:
	put property `blocks` of Presentation into Blocks
    set BlockNames to array
    put 0 into N
    while N is less than the json count of Blocks
    begin
    	put element N of Blocks into Block
        put property `defaults` of Block into Defaults
        json add property `name` of Defaults to BlockNames
    	add 1 to N
    end
!    put property `content` of Presentation into Contents
    set ContentNames to array
    put 0 into N
    while N is less than the json count of Contents
    begin
    	put element N of Contents into Content
        json add property `name` of Content to ContentNames
        add 1 to N
    end
    put element SelectedStep of Steps into CurrentStep

    clear Editor
    create Table in Editor

ReloadStepEditor:
    set the style of Table to `width:100%`
    put property `action` of CurrentStep into Action
    if SelectedStep is not 0
    begin
        create TR in Table
        create TD in TR
        set the content of TD to `Action:`
        create TD in TR
        create ActionSelect in TD
        set the style of ActionSelect to `width:100%`
        set ActionSelect from ActionNames as Action
    end

	create TR in Table
    create TD in TR
    set the style of TD to `width:6em`
    set the content of TD to `Name:`
    create TD in TR
    index TitleInput to SelectedStep
    create TitleInput in TD
    set the style of TitleInput to `width:100%`
    set the content of TitleInput to property `title` of CurrentStep
    if SelectedStep is not 0
    begin
        create TR in Table
        create TD in TR
        set the style of TD to `width:6em`
        set the content of TD to `Label:`
        create TD in TR
        index LabelInput to SelectedStep
        create LabelInput in TD
        set the style of LabelInput to `width:100%`
        set the content of LabelInput to property `label` of CurrentStep
    end

	if Action is `init` gosub to EditInit
    else if Action is `set content` gosub to EditSetContent
    else if Action is `show` gosub to EditShow
    else if Action is `hide` gosub to EditHide
    else if Action is `pause` gosub to EditPause
    else if Action is `fade up` gosub to EditFadeUp
    else if Action is `fade down` gosub to EditFadeDown
    else if Action is `animate` gosub to EditAnimate
    else if Action is `crossfade` gosub to EditCrossfade
    else if Action is `transition` gosub to EditTransition
    else if Action is `goto` gosub to EditGoto
    else if Action is `load` gosub to EditLoad
    else if Action is `chain` gosub to EditChain
    else
    begin
    end
    on change ActionSelect
    begin
    	set Response
    	if Action is not empty
        begin
            if not confirm `Changing the action will remove all step data. Do you want to continue?`
            	clear Response
        end
        if Response
        begin
        	index StepButton to SelectedStep
            index TitleInput to SelectedStep
            set property `title` of CurrentStep to the text of TitleInput
            put the selected item in ActionSelect into Action
            gosub to CreateNewAction
            clear Table
            go to ReloadStepEditor
        end
        else set ActionSelect from ActionNames as property `action` of CurrentStep
    end
    
!	Add the buttons below the table
    create TR in Table
    create TD in TR
    create TD in TR
    set the style of TD to `padding-bottom:0.2em`
    create InsertBefore in TD
    set the style of InsertBefore to `width:calc(100% / 3)`
    if SelectedStep is 0 set the text of InsertBefore to `---`
    else
    begin
        set the text of InsertBefore to `Add Step Before`
        on click InsertBefore go to AddStepBefore
    end
    create Save in TD
    set the style of Save to `width:calc(100% / 3)`
    set the text of Save to `Save`
    on click Save gosub to SaveCurrentStep
    create InsertAfter in TD
    set the style of InsertAfter to `width:calc(100% / 3)`
    set the text of InsertAfter to `Add Step After`
    on click InsertAfter go to AddStepAfter
	stop

!	Editors for the various Action types

EditInit:
	create TR in Table
    create TD in TR
    set the content of TD to `Properties:`
    create TD in TR
	create BlockTable in TD
    set the style of BlockTable to `width:100%;border:1px solid gray`
    put the json count of InitProperties into N
    set the elements of InitInput to N
    put 0 into B
    while B is less than N
    begin
	   	put element B of InitProperties into InitProperty
        create BlockRow in BlockTable
        set the style of BlockRow to `display:flex`
        create Cell in BlockRow
        set the style of Cell to `width:6em;padding-left:0.2em`
        set the content of Cell to InitProperty
        if InitProperty is `css`
        begin
        	create InitCSS in BlockRow
            set the style of InitCSS to `flex:1;height:20em`
            put property InitProperty of CurrentStep into Item
            replace `%0a` with newline in Item
            replace `&quot;` with `"` in Item
            set the content of InitCSS to Item
        end
        else
        begin
            index InitInput to B
            create InitInput in BlockRow
            set the style of InitInput to `flex:1`
            put property InitProperty of CurrentStep into Item
            replace `&quot;` with `"` in Item
            set the content of InitInput to Item
        end
    	add 1 to B
    end
	return

EditSetContent:
	create TR in Table
    create TD in TR
    set the content of TD to `Display:`
    create TD in TR
    index DisplaySelect to SelectedStep
    create DisplaySelect in TD
    set the style of DisplaySelect to `width:100%`
    put property `display` of CurrentStep into Options
    if Options is not `block` put `hidden` into Options
    set DisplaySelect from DisplayTypes as Options

	create TR in Table
    create TD in TR
    set the content of TD to `Blocks:`
    create TD in TR
	create BlockTable in TD
    set the style of BlockTable to `margin:0.2em 0.5em 0 0;border:1px solid gray`
ReloadBlocks:
	clear BlockTable
    create BlockRow in BlockTable
    set the style of BlockRow to `display:flex`
    create Header in BlockRow
    set the style of Header to `flex:1`
    set the content of Header to `Blocks`
    create Header in BlockRow
    set the style of Header to `flex:1`
    set the content of Header to `Content`
    create BlockData in BlockRow
    set the style of BlockData to `width:2.8em;text-align:center`
    create Link in BlockData
    create PlusIcon in Link
    set the style of PlusIcon to `width:1em;margin-top:0.1em`
    set attribute `src` of PlusIcon to `/resources/icon/plus.png`
    on click PlusIcon
    begin
    	gosub to SaveCurrentStep
    	set Block to object
        set property `block` of Block to empty
        set property `content` of Block to empty
        json add Block to Blocks
        set property `blocks` of CurrentStep to Blocks
        clear Table
        go to ReloadStepEditor
    end
    put property `blocks` of CurrentStep into Blocks
    put the json count of Blocks into N
    set the elements of BlockSelect to N
    set the elements of ContentSelect to N
    set the elements of UpContent to N
    set the elements of DeleteContent to N
	put 0 into B
	while B is less than N
	begin
	   	put element B of Blocks into Block
        create BlockRow in BlockTable
        set the style of BlockRow to `display:flex`
        index BlockSelect to B
        create BlockSelect in BlockRow
        set the style of BlockSelect to `flex:1`
        set BlockSelect from BlockNames as property `block` of Block
        index ContentSelect to B
        create ContentSelect in BlockRow
        set the style of ContentSelect to `flex:1`
        set ContentSelect from ContentNames as property `content` of Block
        if B is 0
        begin
            create BlockData in BlockRow
            set the style of BlockData to `width:1.4em`
        end
        else
        begin
            create BlockData in BlockRow
            set the style of BlockData to `width:1.4em;text-align:center`
            index UpContent to B
            create Link in BlockData
            create UpContent in Link
            set the style of UpContent to `width:1em;margin:0.1em 0 0 0.2em`
            set attribute `src` of UpContent to `/resources/icon/up.png`
        end
        create BlockData in BlockRow
        set the style of BlockData to `width:1.4em;text-align:center`
        index DeleteContent to B
        create Link in BlockData
        create DeleteContent in Link
        set the style of DeleteContent to `width:1em;margin-top:0.1em`
        set attribute `src` of DeleteContent to `/resources/icon/stop.png`
        add 1 to B
    end
    on change BlockSelect
    begin
    	put the index of BlockSelect into N
        put element N of Blocks into Block
        set property `block` of Block to BlockSelect
        set element N of Blocks to Block
        set property `blocks` of CurrentStep to Blocks
        set element SelectedStep of Steps to CurrentStep
    end
    on change ContentSelect
    begin
    	put the index of ContentSelect into N
        put element N of Blocks into Block
        set property `content` of Block to ContentSelect
        set element N of Blocks to Block
        set property `blocks` of CurrentStep to Blocks
        set element SelectedStep of Steps to CurrentStep
    end
    on click UpContent
    begin
    	put the index of UpContent into N
        put element N of Blocks into Name
        take 1 from N
        put element N of Blocks into Name2
        set element N of Blocks to Name
        add 1 to N
        set element N of Blocks to Name2
    	set property `blocks` of CurrentStep to Blocks
        set element SelectedStep of Steps to CurrentStep
        set property `steps` of Presentation to Steps
        go to ReloadBlocks
    end
    on click DeleteContent
    begin
    	put the index of DeleteContent into N
        json delete element N of Blocks
        set property `blocks` of CurrentStep to Blocks
        clear Table
        go to ReloadStepEditor
    end
	return

EditShow:
EditHide:
	gosub to EditBlockList
	return

EditPause:
    gosub to EditDuration
	return

EditFadeUp:
EditFadeDown:
	gosub to EditBlockList
    gosub to EditDuration
    gosub to EditContinue
	return

EditAnimate:
    create TR in Table
    create TD in TR
    set the style of TD to `width:6em`
    set the content of TD to `Block:`
    create TD in TR
    set the elements of BlockSelect to 1
    put property `block` of CurrentStep into Block
    create BlockRow in TD
    create BlockSelect in BlockRow
    set the style of BlockSelect to `width:100%`
    set BlockSelect from BlockNames as Block
    gosub to EditContinue
	return

EditCrossfade:
	put ContentNames into Names
    put `New text` into TargetText
    gosub to EditBlockAndTarget
	return

EditTransition:
	put BlockNames into Names
    put `Target` into TargetText
    gosub to EditBlockAndTarget
	return

EditGoto:
    create TR in Table
    create TD in TR
    set the style of TD to `width:6em`
    set the content of TD to `Target:`
    create TD in TR
    index TargetInput to SelectedStep
    create TargetInput in TD
    set the style of TargetInput to `width:100%`
    set the content of TargetInput to property `target` of CurrentStep
	return

EditLoad:
    create TR in Table
    create TD in TR
    set the style of TD to `width:6em`
    set the content of TD to `URL:`
    create TD in TR
    index URLInput to SelectedStep
    create URLInput in TD
    set the style of URLInput to `width:100%`
    set the content of URLInput to property `url` of CurrentStep
	return

EditChain:
    get UserRecord from storage as `.user`
    get Email from storage as `user.email`
    get Password from storage as `user.password`
    get UserHome from storage as `user.home`
	set ChainNames to array
    
    if Static is `static` go to EditChainFromStorage
    if UserRecord go to EditChainFromUser

EditChainFromAdmin:
    get AdminPassword from storage as `.password`
    if AdminPassword is empty put prompt `Please type the admin password` with `` into AdminPassword
    rest get Valid from `verify/` cat AdminPassword
    or begin
        alert `Unable to verify password.`
        put empty into storage as `.password`
    end
    if Valid is `yes` put AdminPassword into storage as `.password`
   	else return

    rest get Files from `list/` cat AdminPassword cat `/scripts`
    put the json count of Files into FileCount
    put 0 into N
    while N is less than FileCount
    begin
        put element N of Files into Item
        if property `type` of Item is `json` json add property `name` of Item to ChainNames
        add 1 to N
     end
     go to ProcessChainNames

EditChainFromUser:
    rest get Files from `ulist/` cat Email cat `/` cat Password cat `/`
       	cat `users/` cat UserHome cat `/scripts`
    put the json count of Files into FileCount
    put 0 into N
    while N is less than FileCount
    begin
        put element N of Files into Item
        if property `type` of Item is `json` json add property `name` of Item to ChainNames
        add 1 to N
     end
     go to ProcessChainNames

EditChainFromStorage:
	get Files from storage
 	put the json count of Files into FileCount
  	put 0 into N
  	while N is less than FileCount
  	begin
  		put element N of Files into Item
    	if left 1 of Item is not `.`
        begin
          	if the position of `.json` in Item is not -1 json add Item to ChainNames
        end
	   	add 1 to N
    end

ProcessChainNames:
    json sort ChainNames
    create TR in Table
    create TD in TR
    set the style of TD to `width:6em`
    set the content of TD to `Script:`
    create TD in TR
    index ChainSelect to SelectedStep
    create ChainSelect in TD
    set the style of ChainSelect to `width:100%`
    put property `script` of CurrentStep into Name
    set ChainSelect from ChainNames as Name
	return

EditBlockList:
	create TR in Table
    create TD in TR
    set the content of TD to `Blocks:`
    create TD in TR
	create BlockTable in TD
    set the style of BlockTable to `width:100%;border:1px solid gray`
    create BlockRow in BlockTable
    set the style of BlockRow to `display:flex`
    create Header in BlockRow
    set the style of Header to `flex:1`
    set the content of Header to `Blocks`
    create BlockData in BlockRow
    set the style of BlockData to `width:2em;text-align:center`
    create Link in BlockData
    create PlusIcon in Link
    set the style of PlusIcon to `width:1em;margin-top:0.1em`
    set attribute `src` of PlusIcon to `/resources/icon/plus.png`
    on click PlusIcon
    begin
    	gosub to SaveCurrentStep
        json add empty to Blocks
        set property `blocks` of CurrentStep to Blocks
        set element SelectedStep of Steps to CurrentStep
        clear Table
        go to ReloadStepEditor
    end
    put property `blocks` of CurrentStep into Blocks
    if Blocks is empty set Blocks to array
    put the json count of Blocks into N
    set the elements of BlockSelect to N
    set the elements of DeleteContent to N
    put 0 into B
    while B is less than N
    begin
	   	put element B of Blocks into Block
        create BlockRow in BlockTable
        set the style of BlockRow to `display:flex`
        index BlockSelect to B
        create BlockSelect in BlockRow
        set the style of BlockSelect to `flex:1`
        set BlockSelect from BlockNames as Block
        create BlockData in BlockRow
        set the style of BlockData to `width:2em;text-align:center`
        index DeleteContent to B
        create Link in BlockData
        create DeleteContent in Link
        set the style of DeleteContent to `width:1em;margin-top:0.1em`
        set attribute `src` of DeleteContent to `/resources/icon/stop.png`
    	add 1 to B
    end
    on change BlockSelect
    begin
    	put the index of BlockSelect into N
        set element N of Blocks to the selected item in BlockSelect
        set property `blocks` of CurrentStep to Blocks
        set element SelectedStep of Steps to CurrentStep
    end
    on click DeleteContent
    begin
    	put the index of DeleteContent into N
        json delete element N of Blocks
        set property `blocks` of CurrentStep to Blocks
        set element SelectedStep of Steps to CurrentStep
        clear Table
        go to ReloadStepEditor
    end
    return

EditBlockAndTarget:
	create TR in Table
    create TD in TR
    set the content of TD to `Block:`
    create TD in TR
    set the elements of BlockSelect to 1
    put property `block` of CurrentStep into Block
    create BlockRow in TD
    create BlockSelect in BlockRow
    set the style of BlockSelect to `width:100%`
    set BlockSelect from BlockNames as Block
	create TR in Table
    create TD in TR
    set the content of TD to TargetText
    create TD in TR
    put property `target` of CurrentStep into Target
    create BlockRow in TD
    create TargetSelect in BlockRow
    set the style of TargetSelect to `width:100%`
    set TargetSelect from Names as Target
    gosub to EditDuration
    gosub to EditContinue
	return

EditDuration:
    create TR in Table
    create TD in TR
    set the style of TD to `width:6em`
    set the content of TD to `Duration:`
    create TD in TR
    index DurationInput to SelectedStep
    create DurationInput in TD
    set the style of DurationInput to `width:100%`
    set the content of DurationInput to property `duration` of CurrentStep
	return

EditContinue:
    create TR in Table
    create TD in TR
    set the style of TD to `width:6em`
    set the content of TD to `Continue:`
    create TD in TR
    index ContinueSelect to SelectedStep
    create ContinueSelect in TD
    set the style of ContinueSelect to `width:100%`
    put property `continue` of CurrentStep into Options
    if not Options put `no` into Options
    set ContinueSelect from ContinueTypes as Options
	return

!	Create a new action with a full set of empty properties
CreateNewAction:
	index TitleInput to SelectedStep
    if the text of TitleInput is empty
    begin
    	set property `title` of CurrentStep to `New step: ` cat Action
    end
    set property `action` of CurrentStep to Action
    set property `label` of CurrentStep to empty
    if Action is `init`
    begin
    	put 0 into N
        while N is less than the json count of InitProperties
        begin
        	put element N of InitProperties into InitProperty
            set property InitProperty of CurrentStep to empty
        	add 1 to N
        end
        set property `aspect ratio` of CurrentStep to `WW:HH`
    end
    else if Action is `set content`
    begin
    	put property `blocks` of CurrentStep into Blocks
        if Blocks is empty
        begin
        	set Blocks to array
            set property `blocks` of CurrentStep to Blocks
        end
    end
    else if Action is `show`
    begin
    	put property `blocks` of CurrentStep into Blocks
        if Blocks is empty
        begin
        	set Blocks to array
            set property `blocks` of CurrentStep to Blocks
        end
    end
 	else if Action is `hide`
    begin
    	put property `blocks` of CurrentStep into Blocks
        if Blocks is empty
        begin
        	set Blocks to array
            set property `blocks` of CurrentStep to Blocks
        end
    end
	else if Action is `pause`
    begin
    	put property `duration` of CurrentStep into Duration
        if Duration is empty set property `duration` of CurrentStep to 1
    end
	else if Action is `fade up`
    begin
    	put property `blocks` of CurrentStep into Blocks
        if Blocks is empty
        begin
        	set Blocks to array
            set property `blocks` of CurrentStep to Blocks
        end
    	put property `duration` of CurrentStep into Duration
        if Duration is empty set property `duration` of CurrentStep to 1
    end
	else if Action is `fade down`
    begin
    	put property `blocks` of CurrentStep into Blocks
        if Blocks is empty
        begin
        	set Blocks to array
            set property `blocks` of CurrentStep to Blocks
        end
    	put property `duration` of CurrentStep into Duration
        if Duration is empty set property `duration` of CurrentStep to 1
    end
	else if Action is `crossfade`
    begin
    	put property `duration` of CurrentStep into Duration
        if Duration is empty set property `duration` of CurrentStep to 1
    end
	else if Action is `transition`
    begin
    	put property `duration` of CurrentStep into Duration
        if Duration is empty set property `duration` of CurrentStep to 1
    end
	else if Action is `goto`
    begin
    	put property `target` of CurrentStep into Target
        if Target is empty set property `target` of CurrentStep to `******`
    end
	else if Action is `load`
    begin
    	put property `url` of CurrentStep into URL
        if URL is empty set property `url` of CurrentStep to `******`
    end
    set element SelectedStep of Steps to CurrentStep
    set property `steps` of Presentation to Steps
	return

!	Save the current step
SaveCurrentStep:
	if SelectedStep is -1 return
	index TitleInput to SelectedStep
    put element SelectedStep of Steps into CurrentStep
    set property `title` of CurrentStep to the text of TitleInput
    index StepButton to SelectedStep
    set the text of StepButton to the content of TitleInput
	index LabelInput to SelectedStep
    if SelectedStep is not 0 set property `label` of CurrentStep to the content of LabelInput
	put property `action` of CurrentStep into Action
    if Action is `init`
    begin
        put 0 into N
        while N is less than the json count of InitProperties
        begin
            put element N of InitProperties into InitProperty
            index InitInput to N
            if InitProperty is `css`
            begin
            	put the content of InitCSS into Item
                replace newline with `%0a` in Item
            end
            else put InitInput into Item
            replace `"` with `&quot;` in Item
            set property InitProperty of CurrentStep to Item
            add 1 to N
        end
    end
    else if Action is `set content`
    begin
    	index DisplaySelect to SelectedStep
        set property `display` of CurrentStep to DisplaySelect
		set Blocks to array
        put 0 into N
        while N is less than the elements of BlockSelect
        begin
        	index BlockSelect to N
            index ContentSelect to N
            set Item to object
            set property `block` of Item to BlockSelect
            set property `content` of Item to ContentSelect
            json add Item to Blocks
            add 1 to N
        end
        set property `blocks` of CurrentStep to Blocks
    end
    else if Action is `show`
    begin
    	put property `blocks` of CurrentStep into Blocks
        if Blocks is empty
        begin
        	set Blocks to array
            set property `blocks` of CurrentStep to Blocks
        end
    end
 	else if Action is `hide`
    begin
    	put property `blocks` of CurrentStep into Blocks
        if Blocks is empty
        begin
        	set Blocks to array
            set property `blocks` of CurrentStep to Blocks
        end
    end
	else if Action is `fade up`
    begin
    	put property `blocks` of CurrentStep into Blocks
        if Blocks is empty
        begin
        	set Blocks to array
            set property `blocks` of CurrentStep to Blocks
        end
    	index DurationInput to SelectedStep
    	set property `duration` of CurrentStep to DurationInput
        index ContinueSelect to SelectedStep
        set property `continue` of CurrentStep to ContinueSelect
    end
	else if Action is `fade down`
    begin
    	put property `blocks` of CurrentStep into Blocks
        if Blocks is empty
        begin
        	set Blocks to array
            set property `blocks` of CurrentStep to Blocks
        end
    	index DurationInput to SelectedStep
    	set property `duration` of CurrentStep to DurationInput
        index ContinueSelect to SelectedStep
        set property `continue` of CurrentStep to ContinueSelect
    end
    else if Action is `animate`
    begin
        set property `block` of CurrentStep to BlockSelect
        index ContinueSelect to SelectedStep
        set property `continue` of CurrentStep to ContinueSelect
    end
	else if Action is `crossfade`
    begin
        set property `block` of CurrentStep to BlockSelect
        set property `target` of CurrentStep to TargetSelect
    	index DurationInput to SelectedStep
    	set property `duration` of CurrentStep to DurationInput
        index ContinueSelect to SelectedStep
        set property `continue` of CurrentStep to ContinueSelect
    end
	else if Action is `transition`
    begin
    	set property `block` of CurrentStep to BlockSelect
        set property `target` of CurrentStep to TargetSelect
    	index DurationInput to SelectedStep
    	set property `duration` of CurrentStep to DurationInput
        index ContinueSelect to SelectedStep
        set property `continue` of CurrentStep to ContinueSelect
    end
	else if Action is `pause`
    begin
    	index DurationInput to SelectedStep
    	set property `duration` of CurrentStep to DurationInput
    end
	else if Action is `goto`
    begin
    	index TargetInput to SelectedStep
    	set property `target` of CurrentStep to TargetInput
    end
	else if Action is `load`
    begin
    	put property `url` of CurrentStep into URL
        if URL is empty set property `url` of CurrentStep to `******`
    end
	else if Action is `chain`
    begin
    	index ChainSelect to SelectedStep
    	set property `script` of CurrentStep to ChainSelect
        if Static put `static` into Mode
        else if UserRecord
        begin
        	put `user` into Mode
            set property `path` of CurrentStep to Email cat `/` cat Password cat `/`
       			cat `users/` cat UserHome cat `/scripts/`
        end
        else 
        begin
        	put `admin` into Mode
            set property `path` of CurrentStep to `/resources/scripts/`
        end
        set property `mode` of CurrentStep to Mode
    end
    index URLInput to SelectedStep
    set element SelectedStep of Steps to CurrentStep
    set property `steps` of Presentation to Steps

!	Tell the parent to refresh the script
    set Message to object
    set property `action` of Message to `refresh`
    set property `source` of Message to `steps`
    send Message to parent
	return