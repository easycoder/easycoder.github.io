# Handling plugins

This is a fairly complex part of the language but well worth implementing as it gives a huge amount of power to the programmer.

In order to compile a script, all of the domain handlers for the keywords it contains must already be present. A script can't request a plugin for its own code because by then the compiler is already running, and to add a new domain would mean suspending compilation while the new domain is loading. Not impossible, perhaps, but I'm assuming this is not implemented. So instead we use a 2-stage bootstrap where the extra domain(s) are called in by a boot script which loads the main script, compiles and runs it.

For this we need 2 keywords: `require` and `run`, plus a `module` variable type in the core language module. The `require` syntax looks like this:
```
    require js <url>
    require css <url>
```
and the compiler code is as follows:
```
	Require: {

		compile: compiler => {
			const lino = compiler.getLino();
			const type = compiler.nextToken();
			if ([`css`, `js`].includes(type)) {
				const url = compiler.getNextValue();
				compiler.addCommand({
					domain: `core`,
					keyword: `require`,
					lino,
					type,
					url
				});
				return true;
			}
			throw new Error(`File type must be 'css' or 'js'`);
		},

		// runtime

		run: program => {
			const command = program[program.pc];
			program.require(command.type, program.getValue(command.url),
				function () {
					program.run(command.pc + 1);
				});
			return 0;
		}
	},
```
Note that the final `return 0` causes program execution to halt while the load is happening, and `program.run(command.pc + 1)` in the callback function resumes execution once the load has completed.

The `program.require()` function called by `run(program)` looks like this:
```
	require: function(type, src, callback) {
		let prefix = ``;
		if (src[0] == `/`) {
			prefix = window.location + `/`;
		}
		const element = document.createElement(type === `css` ? `link` : `script`);
		switch (type) {
		case `css`:
			element.type = `text/css`;
			element.href = `${prefix}${src}`;
			element.rel = `stylesheet`;
			break;
		case `js`:
			element.type = `text/javascript`;
			element.src = `${prefix}${src}`;
			break;
		default:
			return;
		}
		element.onload = function () {
			console.log(`${Date.now() - EasyCoder.timestamp} ms: Library ${prefix}${src} loaded`);
			callback();
		};
		document.head.appendChild(element);
	},
```
This can load either CSS or JS files, so as well as your domains being load-on-demand capable, so also can be your CSS scripts. Note the use of a leading `/` on the URL to load from a path that starts at the top-level of your website URL. This makes for portability.

## Running a child script

The `run()` handler looks like this:
```
	Run: {

		compile: compiler => {
			const lino = compiler.getLino();
			const script = compiler.getNextValue();
			// Get the exports, if any
			const imports = [];
			if (compiler.tokenIs(`with`)) {
				while (true) {
					if (compiler.nextIsSymbol(true)) {
						const symbolRecord = compiler.getSymbolRecord();
						imports.push(symbolRecord.name);
						compiler.next();
						if (!compiler.tokenIs(`and`)) {
							break;
						}
					}
				}
			}
			// Specify the module variable
			let module;
			if (compiler.tokenIs(`as`)) {
				if (compiler.nextIsSymbol(true)) {
					const moduleRecord = compiler.getSymbolRecord();
					// moduleRecord.program = program.script;
					compiler.next();
					if (moduleRecord.keyword !== `module`) {
						throw new Error(`'${moduleRecord.name}' is not a module`);
					}
					module = moduleRecord.name;
				}
			}
			let nowait = false;
			if (compiler.tokenIs(`nowait`)) {
				compiler.next();
				nowait = true;
			}
			const pc = compiler.getPc();
			compiler.addCommand({
				domain: `core`,
				keyword: `run`,
				lino,
				script,
				imports,
				module,
				nowait,
				then: 0
			});
			// Get the 'then' code, if any
			if (compiler.tokenIs(`then`)) {
				const goto = compiler.getPc();
				// Add a 'goto' to skip the 'then'
				compiler.addCommand({
					domain: `core`,
					keyword: `goto`,
					goto: 0
				});
				// Fixup the link to the 'then' branch
				compiler.getCommandAt(pc).then = compiler.getPc();
				// Process the 'then' branch
				compiler.next();
				compiler.compileOne(true);
				compiler.addCommand({
					domain: `core`,
					keyword: `stop`
				});
				// Fixup the 'goto'
				compiler.getCommandAt(goto).goto = compiler.getPc();
			}
			return true;
		},

		// runtime

		run: program => {
			program.nextPc = program.pc + 1;
			program.runScript(program);
			return 0;
		}
```
This may seem a little complex but it deals with several things. As well as just running a script you also have the option of

> a) adding a `with` clause to hand some of your variables to the child script

> b) specifying an action to occur after the child script has completed

The first of these is equivalent to passing variables by reference in other programming languages, except it's not a subroutine or function that we're sharing with; it's a completely different script that's potentially running concurrently with the first one. Having a shared variable space is a powerful feature; I'll describe it in more detail later.

Since you are launching an independent program that could be sharing some of your variables, you may not be able to interact with it until it has completed some initialization. For example, imagine a child script whose sole job is to fetch the weather from a remote server when it receives a message from the parent. So we add a command that the child script runs when it is ready to interact with the parent - in this case to receive messages. I use `set ready` but you can choose any suitable syntax. The parent will block until this command is run.

The use of `nowait` overrides this functionality and allows the calling script to continue immediately.

Here is the `runScript(program)` function from _**EasyCoder**_:
```
	runScript: function (program) {
		const command = program[program.pc];
		const script = program.getValue(command.script);
		const imports = command.imports;
		imports.caller = program.script;
		const moduleRecord = command.module ? program.getSymbolRecord(command.module) : null;
		try {
			EasyCoder.tokeniseAndCompile(script.split(`\n`), imports, moduleRecord, this.script, command.then);
		} catch (err) {
			EasyCoder.reportError(err, program, program.source);
			if (program.onError) {
				program.run(program.onError);
			} else {
				let parent = EasyCoder.scripts[program.parent];
				if (parent && parent.onError) {
					parent.run(parent.onError);
				}
			}
			return;
		}
		if (command.nowait) {
			EasyCoder.run(program.nextPc);
		}
	},
```
You can see this invokes the tokenizer and compiler to process the new script and then run it. The largest part of the function is in dealing with errors.

~pn:5 Plugins:Plugins:5 Plugins/Export and import:Export and import~
