# Export and import

As ~tid:Handling plugins:already mentioned~, the language can share variables between scripts, allowing almost any amount of functionality to be delegated. With such power comes a certain amount of danger as you may have no control over what the delegate will do with your variables.

The code to specify a list of exports looks like this:
```
    // Get the exports, if any
    const imports = [];
    if (compiler.tokenIs(`with`)) {
        while (true) {
            if (compiler.nextIsSymbol(true)) {
                const symbolRecord = compiler.getSymbolRecord();
                imports.push(symbolRecord.name);
                compiler.next();
                if (!compiler.tokenIs(`and`)) {
                    break;
                }
            }
        }
    }
```
It may seem odd to label the array `imports[]` but that's exactly what they will be when received by the child script Here we specify what they are in the parent's space; simply a matter of listing the variable names. For example:
```
    run Calculator with Opcode and Arg1 and Arg2
```
On the receiving side, the child script would start with something like this:
```
    import variable Opcode and variable Arg1 and variable Arg2
```
The names of the variables don't have to match what they were called in the parent script, but their types must match, as must the number of shared variables. Here's the code to handle importing:
```
	Import: {

		compile: compiler => {
			const imports = compiler.imports;
			let caller = EasyCoder.scripts[imports.caller];
			const program = compiler.getProgram();
			if (imports.length) {
				for (const name of imports) {
					let symbolRecord = caller.getSymbolRecord(name);
					const thisType = compiler.nextToken();
					const exportedType = symbolRecord.keyword;
					if (thisType === exportedType) {
						const command = compiler.compileVariable(symbolRecord.domain, exportedType, true);
						const newRecord = program[compiler.getSymbols()[command.name].pc];
						newRecord.element = symbolRecord.element;
						newRecord.exporter = symbolRecord.exporter ? symbolRecord.exporter : caller.script;
						newRecord.exportedName = symbolRecord.name;
						newRecord.extra = symbolRecord.extra;
						newRecord.isVHolder = symbolRecord.isVHolder;
						if (symbolRecord.program) {
							newRecord.program = symbolRecord.program.script;
						}
						newRecord.imported = true;
						if (!compiler.tokenIs(`and`)) {
							break;
						}
					} else {
						throw new Error(`Mismatched import variable type for '${symbolRecord.name}'`);
					}
				}
				if (compiler.tokenIs(`and`)) {
					throw new Error(`Imports do not match exports`);
				}
			} else {
				compiler.next();
			}
			return true;
		},

		run: program => {
			return program[program.pc].pc + 1;
		}
	},
```
This iterates the imports. For each one, we get its record from the symbol table of the calling program and compare its type with the corresponding item in the import command as shown above. If they match we then compile the variable as if it had been a regular declaration.

Next we pull out the record for the variable as `newRecord` and add information from the exported variable. The important thing is to ensure the two records keep in step with each other and there are a couple of different strategies to ensure this. One is to share the actual content of the parent and child; the other is to synchronize every time the variable is read or altered. When I translated this code from Java back in 2018 I was still new to JavaScript and I couldn't figure if sharing was even possible, so I went for the second strategy. You should not assume that _**EasyCoder**_ does it the best way; the code has been subsequently governed by the rule "If it ain't broke, don't fix it".

~pn:5 Plugins/Handling plugins:Handling plugins:home/Conclusion:Conclusion~
