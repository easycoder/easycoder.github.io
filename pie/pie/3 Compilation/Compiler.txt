# Building a compiler

Most of the main compiler module is a collection of functions to do things that will be needed by the ~tid:Keywords:keyword handlers~. I'll show the ones implemented in _**EasyCoder**_; your language may need more or less of them.

The _**EasyCoder**_ compiler module looks like this:
```
    const EasyCoder_Compiler = {

        name: `EasyCoder_Compiler`,

        getTokens: function() {
            return this.tokens;
        },

        warning: function(message) {
            this.addWarning(message);
        },

        ...
};
```
## The compiler functions
Compiler functions variously use the list of tokens provided by the ~tid:Tokenizer:tokenizer~, the symbol table and the program array, which is a list of run-time commands.

Looking at each of the functions in turn:

`getTokens()` returns the entire list of tokens as passed in by the ~tid:Tokenizer:tokenizer~.

`addWarning(message)` pushes a warning message onto the warning stack. These may or not be errors but the compiler can't be sure.

`getWarnings()` returns the list of warnings collected so far. These can be presented as part of an error message or just shown at the end of compilation.

`getIndex()` gets the current index into the token list.

`next()` advances the token index without actually doing any processing.

`peek()` retrieves the token at the next position after the current token, thus "peeking" at what comes next.

`more()` returns `true` if there are still tokens waiting to be processed.

`getToken()` returns the current token, or `null` if we're at the end of the list or an empty value is found.

`nextToken()` calls `next()` to move the token pointer, then `getToken()` to return the token at that position.

`tokenIs(value)` returns `true` if the current token has the value given.

`nextTokenIs(value)` advances to the next token then calls `tokenIs(value)`.

`skip(value)` moves on from the current token if it has the value given. This is used to skip over "syntactic noise" such as "the" and is shorthand for `if (tokenIs(value)) { next(); }`, thereby making `value` optional.

`prev()` moves back one token.

`getLino()` retrieves the line number that holds the current token.

`getTarget(index)` is like `getToken()` but it returns the token at a given target index.

`getTargetPc(index)` gets the program counter value for the item - assumed to be a symbol - at the index given, defaulting to the current index.

`getCommandAt(pc)` returns the run-time command at the given program counter location.

`isSymbol(required)` returns `true` if the current token is a program symbol (a variable name). It looks in the symbol table to ensure the token is present. If not, then if a `required` parameter has been passed in an error is thrown; otherwise it just returns `false`.

`nextIsSymbol(required)` moves to the next token then calls `isSymbol(required)`.

`getSymbol(required)` calls `isSymbol(required)` then returns the symbol record for the symbol at the current index in the token list.

`getSymbolPc()` returns the program counter value for the symbol at the current token index. This will be the address in the program list where the symbol is declared.

`getSymbolRecord()` returns the complete record for the symbol at the current token index.

`getSymbols()` returns the entire symbol table.

`getProgram()` returns the program list.

`getPc()` returns the current position in the program list. This is the current size of the list.

`getValue()` calls the ~tid:Values:value processor~ to compile the current token and what follows it as a value. The returned value is a _specification_ of the value, that is, how to evaluate it at runtime.

`getNextValue()` moves the token pointer along then calls `getValue()`.

`getCondition()` calls the ~tid:Conditions:condition processor~ to compile the token and what follows it as a condition. The returned value is a _specification_ of the condition, that is, how to evaluate it at runtime.

`constant(value, numeric)` converts the supplied value into a numeric or a string constant, depending on the flag passed in.

`addCommand(command)` adds a compiled command to the program list.

`addSymbol(name, pc)`adds a symbol to the symbol table by creating a property with the given name and pc value.

`mark()` saves the current index into a special variable.

`rewind()` restores the current index to the previously saved value, thereby _rewinding_ the compiler.

`rewindTo(index)` restores the current index to a specified value.

A keyword processor consists mainly of calls to these functions as it works its way along the token list. After a while you will become very familiar with using many of them. The operation of your compiler should be very easy to follow and new functionality is easy to add.

The rest of the main compiler module comprises functions to manage progress along the token list. Before describing these I'll introduce the concept of _domains_.

~pn:3 Compilation/Tokenizer:The tokenizer:3 Compilation/Domains:Domains~
