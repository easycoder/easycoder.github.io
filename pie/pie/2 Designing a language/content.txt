# General rules

The aim here is to design a language that can be understood by non-programmers, so here are some rules. We'll start off with a fundamental principle:

_All statements must be unambiguous_
 
This is pretty obvious really. If we can't be sure what a statement means, how can a computer be expected to run it? English - as spoken and written - is replete with ambiguities, most of which only serve to confuse and mislead, so it's best to insist on something that doesn't share that weakness. OK, it will probably lack any poetic feel, but poetry is the last thing we need.
 
## Special symbols

 1. Programs written in the language must be understandable when read out loud. To this end they must consist of words, with as few symbols as possible. Most people are not mathematicians and many write without any punctuation at all, or use it incorrectly. For them, computer languages are way too complex. So let's look at what we actually need.

 2. A computer program is code, but sometimes there's a need to explain what's happening. A comment is there for human readers and the computer knows to ignore it when running the program. You can adopt any comment style you wish, but in this book I'm going to use an exclamation mark (!) to indicate that what follows is a comment.

 3. Although modern programming is nearly always 'structured', human language isn't. Human-written instructions such as cooking recipes or navigation directions use GOTO freely, but this has been anathema to programmers for some decades now. Here we have something of a dilemma. Structure can be applied without the use of symbols, for example using indentation as in Python, but then it's all too easy to get wrong in ways that are hard to spot, so in many respects it's little better than relying on the intelligence and common sense of the programmer. The excessive use of structure, in the form of deep nesting, is hard both to read and to understand. Consider also that programs written in our new language are unlikely to be massively complicated. Anything really large or complex requires a team of professional programmers who will inevitably use mainstream development tools, so it's arguable we don't need formal structure. Fortran managed without it in the early days of programming, so without any sense of shame we'll resurrect the much-maligned GOTO command. What we do need is something to identify a labelled point in a program, and for this I'll allocate a colon (:) symbol.
 
 4. When literal text is used it must be quoted so the compiler won't mistake it for code. This is normally done with single or double quotes, but when you want to include one of these characters in your quoted text it gets very messy. So I'll specify the little-used backtick (&#96;) to denote quoted text.

And that's it - just 3 symbols.

## Capitalization

To help with clarity it's useful to capitalize certain words. English is probably not the best example since capitals are used mainly to start sentences and for names. German takes things a lot further by capitalizing all nouns.

Computer languages generally use camel case, which does indeed improve readability, but then start all names with lower-case, contrary to usage in human languages. To keep closer to the latter I'll suggest using an initial capital letter on all variable names. It won't actually be a requirement but it makes statements much more readable. The initial word of every statement will start with a lower-case letter otherwise it could be confused with a variable having the same name. It also helps when you build a color-coded editor, to have all the variables stand out in their own color.

~pn:home:Programming in English:2 Designing a language/Environment:The coding environment~
