# Variables

Earlier I said that our new language should follow the example of English in that the entities it uses all have distinct types. These can be added to by the use of plugin modules, as also mentioned earlier.

The types provided by the core language fall into two groups. First there's a small set of types that are needed by any language to deal with numeric and string values. Along with these are special types such as one to handle supplementary scripts downloaded while the app is running. The second group deals with the visual environment of a browser, in particular the Document Object Model (DOM). There will need to be types for each of the most commonly used DOM types such as `<div>`, `<p>`, `<img>`, `<a>`, `<input>` and so on. Each of these will have its own syntax for the things it can do.

At this point I'll note that for speed the compiler of our language will be single-pass; that is, it processes source scripts just once. The consequence of this is that variables must be declared before they are used, so it will be usual to see a block of declarations at the top of the script looking something like this:
```
div Main
div LeftPanel
div RightPanel
p Intro
a Continue
img ContinueImage
variable N
variable Count
...
```
The syntax is of the type name followed by the name of the variable, which is capitalized (because names are always capitalized in English).

Variables can start with default values or with no value at all, but the latter is preferable as it allows the runtime system to detect when a variable has been accessed before being assigned a value - a common programming mistake. The compiler should also save a flag into the record held for the variable, to be set when code is encountered that accesses the variable. This allows a check to run after compilation to discover unused variables. These are small points but they make life simpler for programmers.

The primary core variable types hold numeric, string or boolean values. You can if you wish use distinct types for each of these, or you can use a single type that adapts itself to the data being placed in it. This is up to you, the designer of the language.

## Arrays

In most computer languages, arrays are represented using notation like `MyVariable[5]`, where the sixth element (counting from zero, not 1) is being referred to. To avoid using symbols we need a different way to represent an array. The approach we will use is found in SQL, where a _cursor_ selects one record of a set returned from a database query.

In our language, all variables will be arrays, initially holding just a single element. They also have an internal  "index" value that points to the currently-selected element of the array; this is initially zero. The language will have a command that sets the number of elements of the array to any chosen value; also a command that sets the index value to any given position in the array. When the array is accessed, the runtime engine uses the indexed item as if it were the only element in the array - a simple variable, in other words. The actual syntax of the commands is up to the designer of the language, but here are some examples:
```
set the elements of MyVariable to 10
index MyVariable to 5
add 1 to MyVariable
```
The first command sets up the array, the second one points to a specific element and the third one accesses the data at the given index.

When the runtime encounters the command `set the elements of` it will either expand or contract the array, depending if the requested number is greater or smaller than the current size. So although on expansion no data will be lost, on contraction the higher-indexed elements will be.

~pn:2 Designing a language/Example code:Example code:2 Designing a language/Commands:Commands~
