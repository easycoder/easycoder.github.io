# Example code

Let's look at the kind of statements that would form part of an English-like programming language. I'll start with arithmetic. The language will handle integer 4-function arithmetic; add, subtract multiply and divide, plus modulo (remainder). Floating-point is only infrequently needed in general programming, and where it is there are ways of handling it without mixing it up with integer processing.

Before I launch into a description of the actual arithmetic functions I'll first introduce the notion of _constants_, _values_ and _variables_. These three can only be defined in terms of each other, so I'll take them in alphabetical order.

## Constants, values and variables

A _constant_ is an entity whose value is fixed for all time, such as 14, 3996, "37.02" or "Kg". Some computer languages let you give a name to a constant (these are called _manifest constants_); this helps if you use the same constant in many places and later want to give it a different value; it saves having to hunt down every occurrence.

A _value_ is any entity that can be used as part of a calculation or other language command. It might be a constant as defined above, it might be the contents of a variable as defined next, or it might be something else that is only valid at the point you actually use it, such as the time of day or the size of a file. To cope with all this variation we'll implement a "value" as a _specification_ of how to obtain the actual numeric, boolean or textual value to use in the command.

A _variable_ is a named storage location into which you put a value. In this language, variables are _typed_; that is, they hold a particular kind of value and have particular actions that are valid for that variable type. This is in fact how English works; a dog cannot be changed into a cat or a chair. Each has its own set of properties, some of which it shares with other variable types.

## Arithmetic

So let's now look at how we do arithmetic, starting with addition. At its simplest, this involves taking two values, adding them together and putting the result somewhere, where _somewhere_ is a variable able to hold a value of the type resulting from the addition.

Most computer languages represent addition like this:
```
C = A + B
```
where A and B are _value_s and C is a _variable_. There are no constraints on what kinds of values are represented by A or B; they could be a constant, a variable or a complex value.

There's a variant on this:
```
C = C + B
```
where the result replaces one of the original values, which must itself be a _variable_.

Remember I insisted some while back about not using symbols and being able to read out a program? OK, so we need to figure what this might look like in our new language. In English you'd likely say
```
add A to B giving C
```
for the first form, and 
```
add B to C
```
for the second. So why not do just this? Let's adopt the exact same syntax we use in speech. And the same goes for the other 3 functions:
```
take A from B giving C
take B from C
multiply B by A giving C
multiply C by B
divide B by A giving C
divide C by B
```
Note how I've shown multiply and divide having the two values in the opposite order to add and subtract. The way I've presented it treats B as a "primary" value and A as something being used to modify it, which might not always be the case, but it serves to point out how the new language can follow English quite closely.

~pn:2 Designing a language/Vocabulary:Vocabulary:2 Designing a language/Variables:Variables~
