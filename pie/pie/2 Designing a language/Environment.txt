# The coding environment

Before starting to look at language syntax we need to consider where our new language will run and what build environment it needs. The outline brief for the new language is that it should be easy to use and to be accessible to as many people as possible. Naturally, the ideal language will run everywhere and not require any build environment, compiling instantly on the fly directly from source text files and running immediately following compilation, but is this feasible? Most modern build environments are as complex and hard to learn as the language itself so it's highly desirable not to need one, but how much of a performance hit will we suffer by doing everything in real time?

Rather than beat about the bush I'll come straight to the point. The techniques described in this book are based on real compilers written in JavaScript and Python. Both compile very quickly. The JavaScript version, running in Chrome on a 2018 Slimbook, will compile a 1000-line script in just over 20msec and my budget smartphone doesn't seem to be much slower. Likewise, the run-time performance is more than up to the needs of most websites. We know it's possible so that's what we should aim for.

The other decision concerns where the code is to run. If your compiler is coded in Python, the applications you build are basically restricted to running on a PC of some kind. I'm personally doubtful of the value of this, especially as Python is itself already a fairly high-level language and you'd get more bang from your buck by just learning that.

Some might prefer to code in C++ or Java. Many compilers are written in C++ so there's something to be said for that, though if you want to distribute your efforts you'll have to do versions for Windows, for Mac and for Linux.

There are many, many other alternatives but JavaScript stands out because it runs in every browser on the planet. Many people, most notably Chromebook owners, rarely venture outside the browser. Your apps can reside on a webserver and be available simply by typing a URL. Add to this a superb graphics environment and the case is unanswerable.

In this book I will assume the browser is the environment and JavaScript is what we'll use to write the new language. JavaScript, as noted above, is incredibly powerful and is well up to the job of being an "assembly language" in which to code higher-level software.

The way it will work is like this. The language itself will be shipped as a single JavaScript file and called by the web page that needs it. Elsewhere in the page will be the script that implements the functions of the required web app. This will be in a specially named `<div>` that the JavaScript module looks for when the page has loaded. If it finds the script it compiles and runs it.

In the browser, JavaScript can be called upon to do anything from minor cosmetic tweaks to full-scale applications. Since our language will be written in JavaScript, as long as it has a full range of commands it can do everything you'd otherwise use JS for. Although it'll run more slowly, you won't notice the difference in most cases.

~pn:2 Designing a language:General rules:2 Designing a language/Vocabulary:Vocabulary~
