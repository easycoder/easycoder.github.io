# Runtime handlers

Every keyword has a runtime handler function alongside the compiler function described ~stid:3 Compilation/Handlers:earlier~. The handler for `add` looks like this:
```
    run: program => {
        const command = program[program.pc];
        const value1 = command.value1;
        const value2 = command.value2;
        const target = program.getSymbolRecord(command.target);
        if (target.isVHolder) {
            const value = target.value[target.index];
            if (value2) {
                const result = program.getValue(value2) +
                    program.getValue(value1);
                target.value[target.index] = {
                    type: `constant`,
                    numeric: true,
                    content: result
                };
            } else {
                if (!value.numeric && isNaN(value.content)) {
                    program.nonNumericValueError(command.lino);
                }
                const result = parseInt(value.content) + parseInt(program.getValue(value1));
                target.value[target.index] = {
                    type: `constant`,
                    numeric: true,
                    content: result
                };
            }
        } else {
            program.variableDoesNotHoldAValueError(command.lino, target.name);
        }
        return command.pc + 1;
    }
```
We start by extracting the command from the program (passed in as the single parameter) at the index given by `program.pc`. Then we get from it the two values to be added and the name of the _target_ variable - that is, where the result is going. Next we get the symbol table record for _target_ and check if it's able to hold a value. If not, we throw an error.

Next we get the current value of the target, by using its array index. Remember that every variable is an array although most only ever have a single element.

Now we check if there actually was a second value or whether the sum is of the form
```
C = C + A
```
If `value2` exists we can request the values to be added, do the addition and write the result back into the target array. Note that we're writing a new value specification, not just the result itself.

If the second value was not present we check that the target contains a numeric value, without which it's risky to do the addition. This is a safety measure to avoid hard-to-find type conversion errors. (You may think it should also be done for the first case too, but I'm assuming that `getValue(value)` will convert strings to numbers.) So we get the integer value of each of the 2 values, add them together and post them back to the target.

Finally, we return the value of the current program counter advanced by one.

There's nothing to say this is the only - or even the best - way to handle all the issues involved, but it's one that I've found in practice results in very few errors.

### `fork`

Here's a second example; this time of the `fork` command:
```
    run: program => {
        const command = program[program.pc];
        try {
            program.run(program.symbols[command.label].pc);
        } catch (err) {
            console.log(err.message);
            alert(err.message);
        }
        return command.pc + 1;
    }
```
This function is very short; it extracts the command as before then starts a new program thread at the address of the label given before returning the next step as before. The new thread won't run immediately because this one is still active, so it just goes onto the queue and the current thread continues with the next command. The new thread will get its day in the sun when the current one reaches a `stop` or a `wait` command.

### `if`

And finally, here's how the `if` command is handled:
```
    run: program => {
        const command = program[program.pc];
        const condition = command.condition;
        const test = program.condition.test(program, condition);
        if (test) {
            return command.pc + 1;
        }
        return command.else;
    }

```
This one extracts the command then the condition and calls the condition processor to evaluate it as `true` or `false`. It then returns either with the address of the next command or with the `else` address.

~pn:4 Runtime:The runtime engine:4 Runtime/DOM:Running DOM commands~
