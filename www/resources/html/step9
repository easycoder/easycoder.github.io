<h2>The Mexican Wave</h2><p>The previous step drew a single rectangle whose height followed a sine curve. Put a number of these together and run them with each one starting a little after the previous one, and you have a Mexican Wave. The code for this is a little complex and I&#39;m not asking you to understand it fully, but I&#39;d like you to see how it makes use of the Arrays I introduced a couple of steps back. As before, it&#39;s best if you copy the code to the editor then run it, so you&#39;ll know what it looks like.</p><div id="clear" style="display:none">y</div><div id="code"> </div><div style="color:#660000; text-align:center"><a href="#" id="copy">Load example code into the editor</a></div><p>Chunks of the code are similar to the previous step, but the main difference is there are 10 rectangles, not one. These are positioned side by side in the container; again the CSS is tricky to explain but every part of it has its purpose. The rectangles have to use <em>absolute positioning</em>, meaning that they have fixed positions rather than just being positioned across the page as the browser sees fit. This would cause problems because when one of them moved it would drag others with it. Components can only have absolute positioning if their parent (the container) has <em>relative positioning</em>; don&#39;t ask me why - that&#39;s just the way it is.</p><p>Now about those arrays. A variable is just a container for a single value, but sometimes we&#39;d like to manage several values together in a group, as for the 10 rectangles. We could just create Rectangle1, Rectangle2 and so on, but then all the code that manages them would have to be duplicated too. Better to have them as a single variable with 10 elements and to select each one in turn to work with it. Using arrays greatly reduces the amount of code needed, and the less code the fewer mistakes. The rectangles all behave identically so it&#39;s easy to set up a loop to construct them, using calculations to define the differences in position.</p><p>When the script runs it maintains a counter called <span style="color:#660033"><span style="font-family:Courier New,Courier,monospace">Time</span></span>, which keeps increasing. Each rectangle has a value <span style="color:#660000"><span style="font-family:Courier New,Courier,monospace">Start</span></span> that says when it should start doing its bit of the Mexican Wave; it also has its own private <span style="color:#660000"><span style="font-family:Courier New,Courier,monospace">Angle</span></span> and a variable called <span style="color:#660000"><span style="font-family:Courier New,Courier,monospace">Done</span></span> which is either true or false depending if the cycle has finished for that rectangle. We call this last one a <em>Boolean</em> variable or a <em>flag</em>. For each step of <span style="color:#660033"><span style="font-family:Courier New,Courier,monospace">Time</span></span> the script sets all the arrays to point to the first rectangle and checks if the start time has been reached yet. If so it computes the new position and size of the rectangle and moves it. Then it repeats the procedure for the other rectangles. Once the cycle has finished for a rectangle the <span style="color:#660000"><span style="font-family:Courier New,Courier,monospace">Done</span></span> flag is set and the test at line 69 will then ensure no further actions are taken for that rectangle. Once they have all finished the whole process starts over again. In the previous example I used a loop within a loop, but here I&#39;ve used a label and an explicit <span style="color:#660000"><span style="font-family:Courier New,Courier,monospace">goto</span></span> instead. Many professional programmers pretend to be horrified by such a practice but I say to them &quot;Don&#39;t be so precious - if it&#39;s clearly understandable and it works, it&#39;s good&quot;.</p><p>As I said above, this is a fairly complex example, chosen in order to highlight how to use arrays but also to demonstrate the kind of things <strong><span style="color:#660000">E</span><span style="color:#000099">asy</span><span style="color:#660000">C</span><span style="color:#000099">oder</span></strong> can be used for. However hard it may look, trying to do it in any other computer language would be a lot harder and the corresponding program would be way, way longer. Most of the work here is being done by the browser; all we&#39;re doing is poking values into it.</p><h2>Next: <a href="#" id="next">The tracer</a></h2>