{
  "commands": {
    "alert": {
      "syntax": "alert {message}",
      "description": "~m:alert~ causes a popup dialog to appear, with the specified message. The browser then blocks until the dialog box is dismissed. See also ~l:confirm|v~ and ~l:prompt|v~.",
      "examples": "alert `The name is ` cat Name"
    },
    "attach": {
      "syntax": "attach {variable} to {css id} [or ...]",
      "description": "Each of the DOM variable types (~l:a~, ~l:div~, ~l:input~ etc) must be attached to an element already in the page and identified by its CSS id, before they can be used. Alternatively, you can ~l:create~ the element as a child of another DOM variable.%0a%0aThese two options allow you to build your page in HTML and attach _**EasyCoder**_ variables to the parts you want, or to build the whole structure in code and attach it to a single DOM element.%0a%0aIf you try to attach to a missing DOM element the system will throw an exception and you~sq~ll have to restart the script. To avoid this and stay in control, use the ~m:or~ clause to trap the exception and do something appropriate.",
      "examples": "attach Container to `ec-container`%0aattach Test to `ec-test`or alert `Not found`"
    },
    "a": {
      "syntax": "a {name}",
      "description": "This declares a hyperlink variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "a MyName"
    },
    "button": {
      "syntax": "button {name}",
      "description": "This declares a ~m:&lt;button&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "button OKButton"
    },
    "div": {
      "syntax": "div {name}",
      "description": "This declares a ~m:&lt;div&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "div Container"
    },
    "file": {
      "syntax": "file {name}",
      "description": "This declares a ~m:&lt;file&gt;~ variable, used in an image uploader. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.%0a%0aFor an example of uploading, see the File Manager in the [Here On The Map](https://hereonthemap.com) project.",
      "examples": "file GetFile"
    },
    "form": {
      "syntax": "form {name}",
      "description": "This declares a ~m:&lt;form&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "form Form"
    },
    "h1": {
      "syntax": "h1 {name}",
      "description": "This declares a ~m:&lt;h1&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "h1 Level1Header"
    },
    "h2": {
      "syntax": "h2{name}",
      "description": "This declares a ~m:&lt;h2&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "h2 Level2Header"
    },
    "h3": {
      "syntax": "h3 {name}",
      "description": "This declares a ~m:&lt;h3&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "h3 Level3Header"
    },
    "h4": {
      "syntax": "h4 {name}",
      "description": "This declares a ~m:&lt;h4&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "h4 Level4Header"
    },
    "h5": {
      "syntax": "h5 {name}",
      "description": "This declares a ~m:&lt;h5&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "h5 Level5Header"
    },
    "h6": {
      "syntax": "h6 {name}",
      "description": "This declares a ~m:&lt;h6&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "h6 Level6Header"
    },
    "label": {
      "syntax": "label {name}",
      "description": "This declares a ~m:&lt;label&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "label NameLabel"
    },
    "p": {
      "syntax": "p {name}",
      "description": "This declares a ~m:&lt;p&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "p FirstParagraph"
    },
    "img": {
      "syntax": "img {name}",
      "description": "This declares an ~m:&lt;img&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~",
      "examples": "img Flag"
    },
    "input": {
      "syntax": "input {name}",
      "description": "This declares an ~m:&lt;input&gt;~ variable; a text entry field. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~",
      "examples": "input NameField"
    },
    "ul": {
      "syntax": "ul {name}",
      "description": "This declares a ~m:&lt;ul&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~",
      "examples": "ul Countries"
    },
    "li": {
      "syntax": "li {name}",
      "description": "This declares a ~m:&lt;li&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~",
      "examples": "li ListItem"
    },
    "select": {
      "syntax": "select {name}",
      "description": "This declares a ~m:&lt;select&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~",
      "examples": "select CountryList"
    },
    "span": {
      "syntax": "span {name}",
      "description": "This declares a ~m:&lt;span&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~",
      "examples": "span InlineText"
    },
    "pre": {
      "syntax": "pre {name}",
      "description": "This declares a ~m:&lt;pre&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~",
      "examples": "pre Preformatted"
    },
    "textarea": {
      "syntax": "textarea {name}",
      "description": "This declares a ~m:&lt;textarea&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "textarea FreeText"
    },
    "audioclip": {
      "syntax": "audioclip {name}",
      "description": "This declares an ~m:&lt;audioclip&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.%0a%0aSee also ~l:play~.",
      "examples": "audioclip Buzz"
    },
    "clear": {
      "syntax": "clear {DOM element}",
      "description": "Removes all the content from the named element.",
      "examples": "clear Container"
    },
    "convert": {
      "syntax": "convert whitespace in {element} to print/html",
      "description": "This deals mainly with ~l:textarea~ data that contains line breaks, which render as %d%a sequences when used in emails, for example. This command replaces them with appropriate line breaks for printing or for use in HTML. Some experimentation will usually be needed in such cases.",
      "examples": "convert whitespace in MyText to print"
    },
    "create": {
      "syntax": "create {dom variable} [in {parent}]%0acreate {audioclip} from {url}",
      "description": "1. Creates a DOM element, adding it to the named parent (which must already exist in the DOM). If ~m:in {parent}~ is missing the element will be created in the ~m:&lt;body&gt;~ of the document.%0a%0a2. Creates an ~l:audioclip~ from any reachable URL.%0a%0aWhen you create an element it will be given an id with this pattern:%0a%0a~m:ec-{name}-{index}-{id}~%0a%0awhere ~m:{name}~ is the name of the variable, ~m:index~ the current ~l:index|k|core~ of the variable and ~m:id~ an incrementing value. If you examine the DOM using the developer tools of your browser you will see this pattern clearly.",
      "examples": "create MyButton in Container%0acreate Buzz from `https://sample.com/audio/buzzer.mp3`"
    },
    "disable": {
      "syntax": "disable {dom element}",
      "description": "Sets the ~m:disabled~ property of the named DOM variable to ~m:true~. See ~l:enable~.",
      "examples": "disable DeleteButton"
    },
    "enable": {
      "syntax": "enable {dom element}",
      "description": "Sets the ~m:disabled~ property of the named DOM variable to ~m:false~. See ~l:disable~.",
      "examples": "enable DeleteButton"
    },
    "get": {
      "syntax": "get {variable} from storage [as {key}]%0aget {variable } from {form}",
      "description": "1. Gets a value from the browser local storage, accessed by its key name. Browser storage is very useful for remembering settings from a previous visit to the page. See also ~l:put!put into storage~. Web storage is per origin (domain and protocol). All pages from one origin can store and access the same data. If you omit the ~m:as {key}~ part the function will return an array comprising all the keys currently held in local storage.%0a%0a2. Gets all the field data from the named form as a JSON string. Elements such as ~l:textarea~ will have line breaks replaced by ~m:&ldquo;&amp;0a;&rdquo;~ to prevent them causing problems elsewhere, so you may need to ~l:convert~ them later on.",
      "examples": "get Mode from storage as `mode-assisted`%0aget TheData from MyForm"
    },
    "section": {
      "syntax": "section {name}",
      "description": "This declares a ~m:&lt;section&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "section SideBar"
    },
    "history": {
      "syntax": "history set/replace/push [url {url}] [state {state}]%0ahistory pop/back/forward",
      "description": "~m:history~ manipulates the browser history stack. This is a complex and rather confusing subject so it~sq~s best to study examples.%0a%0a~m:set~ and ~m:replace~ are identical. They ~sq~mark~sq~ the history stack to provide a point to return to when the user clicks the browser Back button.%0a%0a~m:pop~ and ~m:back~ are also identical. They have the same effect as clicking the browser Back button.%0a%0a~m:push~ adds a new frame to the browser history stack.%0a%0aThe ~m:url~value contains the SEO string to add to the browser~sq~s address bar.%0a%0aThe ~m:state~ value typically contains a JSON string with enough information to restore the state to what it was prior to calling ~m:push~.%0a%0aIf you use ~m:pop~, don~sq~t be tempted to add any other functionality because if the user clicks Back the script won~sq~t know anything about it.",
      "examples": "history set state CurrentState%0ahistory push url `help` state State%0ahistory back"
    },
    "location": {
      "syntax": "location [new] {url}",
      "description": "Go to a new location. Sets the browser address to the given ~m:url~; a kind of ~m:GOTO~ for the browser.%0a%0aIf ~m:new~ is included the location will open in a new browser tab.",
      "examples": "location `https://hereonthemap.com`%0alocation new `https://yorkshirewoman.uk`"
    },
    "mail": {
      "syntax": "mail to {recipient} subject {subject} message {message}",
      "description": "This requests the system to create a new email, addressed to the named ~m:recipient~, with the given ~m:subject~ and containing the given ~m:message~. The user can then complete the email and send it.%0a%0aThere is no mechanism in JavaScript for sending emails directly. This is one way around it; the other is to use the REST server with this endpoint:%0a%0a~m:{site root}/wp-content/plugins/easycoder/rest.php/_email~%0a%0aThe endpoint expects a payload to be provided in the form of a JSON object with the fields ~m:from~, ~m:to~, ~m:subject~ and ~m:message~.",
      "examples": "mail to `xyz@mail.com`%0a&nbsp;&nbsp;subject `Your enquiry`%0a&nbsp;&nbsp;message MyMessage"
    },
    "on": {
      "syntax": "on change {list} ...%0aon click document ...%0aon click {element} ...%0aon key ...%0aon browser back ...%0aon swipe left/right ...%0aon leave ...%0aon pick/drag/drop ...",
      "description": "Handles a selection in a list, a click on any DOM element, a keypress or a swipe left or tight in a mobile browser.%0a%0aThe ~m:on click document~ variant deals with the case where you have imported HTML into your page from another source. This variant detects a click in any ~m:&lt;a&gt;~ element as long as somewhere in the DOM hierarchy above the link there is an element with an id starting with ~m:ec-~. Any element created using the ~l:create~ command will give the new element an id fitting this pattern. You can find which link was click using ~l:document path|v![the] document path~.%0a%0aThe ~m:on leave~ variant allows you to take an action when the visitor leaves your page, such as writing to a tracking log. Please note that your browser is unlikely to let you take any action that will block the leave action (such as putting up a dialog).%0a%0aThe variants ~m:on pick~, ~m:on drag~ and ~m:on drop~ handle drag and drop. The first is triggered when you select the named component, the second when you move the selected component and the third when you finally release it at its new position. Drag and drop is the subject of a couple of examples in the Codex Tutorial, that you can see by clicking the **Tutorial** button above. See also ~l:position|v~.%0a%0aSee also ~l:on|k|core~ in the ~l:on|k|core!core package~.",
      "examples": "on change Countries go to SelectCountry%0aon click HelpButton go to ShowHelp%0aon click document go to ShowHelp%0aon key go to ProcessKey%0aon browser back go to RestorePage%0aon swipe left go to Next%0aon leave send `leave` to TrackingModule%0aon pick Component go to DoPick%0aon drag go to DoDrag%0aon drop go to DoDrop"
    },
    "put": {
      "syntax": "put {value} into storage as {name}",
      "description": "Puts an item of data into browser local storage, where it can be retrieved at any time by the same computer using the same page. See also ~l:get!get from storage~.%0a%0aWeb storage is per origin (domain and protocol). All pages from one origin can store and access the same data.",
      "examples": "put `Admin` into storage as UserName%0aput `https://google.com` into storage as SearchURL"
    },
    "remove": {
      "syntax": "remove element {element}%0aremove attribute {name} of {element}%0aremove {key} from storage",
      "description": "1. This removes a named DOM element from its parent~sq~s child list.%0a%0a2. This removes an attribute of an element, such as when manipulating selections in lists.%0a%0a3. This removes an item from local storage.",
      "examples": "remove element HelpDiv%0aremove attribute `checked` of ListItem%0aremove `password` from storage"
    },
    "scroll": {
      "syntax": "scroll [{element}] to {value}",
      "description": "Scrolls an element or the browser window to the position requested. For a window, the position to scroll to, if not zero, will normally have been previously saved using ~l:scroll position|v![the] scroll position~.",
      "examples": "scroll to 0%0ascroll Panel to 100%0ascroll to SavedScrollPosition"
    },
    "set": {
      "syntax": "set [the content of] {target} from {source}%0aset [the] title to {title}%0aset [the] content of {element} to {value}%0aset [the] id of {element} to {id} [as {selected}]%0aset [the] text of {button}/{input}/{span}/{label} to {text}%0aset [the] size of {input} to {size}%0aset attribute {name} of {element} to {value}%0aset style {name} of {element}/body to {style}%0aset [the] styles of {element} to {styles}%0aset [the] default of {select} to {value}%0aset {select} from List [as {value}]",
      "description": "The ~m:set~ command is the most heavily used in _**EasyCoder**_ (and in English generally). The examples above cover all of the different variants. In many of them, ~m:the~ is optional, but it~sq~s always best to include it as an aid to readability.%0a%0aAlso note that the only way to assign classes to elements is by using ~m:set attribute~. All elements are given ids when they are ~l:create!created~.%0a%0aThe form ~m:set {select} from {list} as {selected}~ loads a ~l:select|k|browser~ element from an array and optionally sets one of them to be the selected value. Note that the values must be strings; if you are using numbers then add them to the list as ~m:`` cat N~ to force them to become strings.%0a%0a~m:set~ is also used in other packages, for example in ~l:set|k|core!core~.",
      "examples": "set the content of TargetDiv from SourceDiv%0aset the title to `My First EasyCoder Page`%0aset the content of Link to `Click for more`%0aset the id of ContentDiv to `ec-contents`%0aset the text of HelpButton to `Help`%0aset the size of NameField to 40%0aset attribute `class` of MainText to `normal-text`%0aset style `display` of ButtonPanel to `none`%0aset style `text-align` of body to `center`%0aset the styles of TextPanel to `flex:2;font-weight:bold;margin-top:1em`%0aset the default of Countries to `Spain`%0aset Months from MonthList as `March`"
    },
    "trace": {
      "syntax": "trace {variable} [{variable}...] [horizontal/vertical]%0atrace",
      "description": "Sets up program tracing or acts as a breakpoint. In the former case it is given a list of variables whose values it should display. In the second case, program execution stops and the user interacts with on-screen buttons to resume or step one command at a time. Tracing is a debugging feature and requires a special DIV to be included in the page:%0a%0a~m:&lt;div id=&quot;easycoder-tracer&quot;&gt;&lt;/div&gt;~%0a%0aThis is where it places its buttons and display panel.%0a%0aYou can choose whether to display variables inline or on separate lines, by specifying ~m:horizontal~ (the default) or ~m:vertical~. This follows the list of variables.%0a%0aWhen the breakpoint is hit the display panel becomes visible, showing the current values of all the variables you asked to display, followed by the lines of script leading up to where you stopped. There are 2 buttons above the display; ~m:Run~ restarts the program from the current point and ~m:Step~ advances to the next script instruction.",
      "examples": "trace Value1 Value2 horizontal%0atrace Width Height Count vertical%0atrace"
    },
    "upload": {
      "syntax": "upload {file} to {path} with {progress} and {status}",
      "description": "This command is a standard image uploader with a progress bar. The file to be uploaded will be in a ~l:file~ element and progess is monitored with a ~l:progress~ element. Progress, in the form of percentage complete, is also written to the ~l:span!status~ element given, as are error messages (if any).%0a%0aThe command uses a special REST endpoint to write the file to the server at a location starting with a directory called ~m:resources~ at the top of your WordPress installation. The ~m:path~ value is relative to that. Any intermediate directories will be created automatically if they don~sq~t already exist.%0a%0aImages will be scaled to a maximum of 1024 pixels wide or high before being saved in the server.",
      "examples": "upload UploadFile to Path with UploadProgress and UploadStatus"
    },
    "sort": {
      "syntax": "sort {JSON array} with {function}",
      "description": "This is a powerful generalized JSON array sorter. Like the JavaScript function that runs internally, all the work is done by a custom function, here provided by the script.%0a%0aThe sort function sets up pairs of array elements to be compared by the comparator function, putting them into ~m:a~ and ~m:b~ arguments. The result of the comparison (1, 0 or -1) goes into the ~m:v~ argument. The example above is a complete script that you can run in the [EasyCoder Codex](https://codex.easycoder.software). See also ~l:filter~.",
      "examples": "&nbsp;&nbsp;script SortTest%0a    %0a&nbsp;&nbsp;variable Items%0a&nbsp;&nbsp;variable A%0a&nbsp;&nbsp;variable B%0a&nbsp;&nbsp;variable V%0a    %0a&nbsp;&nbsp;put empty into Items%0a&nbsp;&nbsp;append `fish` to Items%0a&nbsp;&nbsp;append `cabbage` to Items%0a&nbsp;&nbsp;append `sugar` to Items%0a&nbsp;&nbsp;append `beef` to Items%0a&nbsp;&nbsp;append `potatoes` to Items%0a&nbsp;&nbsp;sort Items with Comparator%0a&nbsp;&nbsp;alert Items%0a&nbsp;&nbsp;exit%0a%0aComparator:%0a&nbsp;&nbsp;put arg `a` of Items into A%0a&nbsp;&nbsp;put arg `b` of Items into B%0a&nbsp;&nbsp;if A is greater than B put 1 into V%0a&nbsp;&nbsp;else if A is less than B put -1 into V%0a&nbsp;&nbsp;else put 0 into V%0a&nbsp;&nbsp;set arg `v` of Items to V%0a&nbsp;&nbsp;stop"
    },
    "filter": {
      "syntax": "filter {JSON array} with {function}",
      "description": "This is a powerful generalized JSON array filter. Like the JavaScript function that runs internally, all the work is done by a custom function, here provided by the script.%0a%0aThe filter command sets up each array element to be examined in turn by the filter function, putting it into the ~m:a~ argument. The result of the filter (true or false) goes into the ~m:v~ argument. The example above is a complete script that you can run in the [EasyCoder Codex](https://codex.easycoder.software). See also ~l:sort~.",
      "examples": "&nbsp;&nbsp;script FilterTest%0a    %0a&nbsp;&nbsp;variable Items%0a&nbsp;&nbsp;variable A%0a&nbsp;&nbsp;variable V%0a    %0a&nbsp;&nbsp;put empty into Items%0a&nbsp;&nbsp;append `fish` to Items%0a&nbsp;&nbsp;append `cabbage` to Items%0a&nbsp;&nbsp;append `sugar` to Items%0a&nbsp;&nbsp;append `beef` to Items%0a&nbsp;&nbsp;append `potatoes` to Items%0a&nbsp;&nbsp;filter Items with MyFilter%0a&nbsp;&nbsp;alert Items%0a&nbsp;&nbsp;exit%0a%0aMyFilter:%0a&nbsp;&nbsp;put arg `a` of Items into A%0a&nbsp;&nbsp;if the length of A is greater than 5 set V else clear V%0a&nbsp;&nbsp;set arg `v` of Items to V%0a&nbsp;&nbsp;stop"
    },
    "request": {
      "syntax": "request fullscreen [exit]",
      "description": "This manages fullscreen mode, where the content of the document occupies the entire screen with now browser element being visible.%0a%0aThis feature allows **_EasyCoder_** to be used for display systems where the whole screen is used, with no title bar or other window furniture visible.%0a%0aNote that if you go into fullscreen mode you may need to provide some means of returning, as the browser Back button will not be visible.",
      "examples": "request fullscreen%0arequest fullscreen exit"
    }
  },
  "values": {
    "{element}": {
      "syntax": "{file}%0a{input}%0a{select}%0a{textarea}",
      "description": "Returns the ~sq~value~sq~ of the element. For a ~l:select~ this is the selected item; for a ~l:file~, ~l:input~ or  ~l:textarea~ it is the text content of the element.",
      "examples": "put TheFile into Value%0aif NameInput is Admin alert `Invalid name`%0aput Countries into Country%0aif Description is empty go to Default"
    },
    "exists": {
      "syntax": "if {element} exists ...",
      "description": "Tests if the ~m:element~ in question exists.",
      "examples": "if Price exists add Price to Total"
    },
    "mobile": {
      "syntax": "mobile",
      "description": "~m:mobile~ has the value ~m:true~ if the system is a smartphone. See also ~l:mobile|c~ in ~l:mobile|c!Conditions~.",
      "examples": "put mobile into IsMobile"
    },
    "br": {
      "syntax": "br",
      "description": "Returns the value ~m:&lt;br /&gt;~, the HTML line break tag.",
      "examples": "put `Line 1` cat br cat `Line 2` into Panel"
    },
    "attribute": {
      "syntax": "attribute {name} of",
      "description": "Gets the named attribute from an element. See also ~l:set|k!set attribute~.",
      "examples": "put attribute `class` of TheElement into Class"
    },
    "confirm": {
      "syntax": "confirm {prompt}",
      "description": "Causes a confirmation dialog to appear with the prompt text given and buttons ~m:OK~ and ~m:Cancel~. If the user clicks ~m:OK~ the value returned is ~m:true~, otherwise ~m:false~. See also ~l:alert|k~ and ~l:prompt~.",
      "examples": "if confirm `Are you sure?` go to Continue"
    },
    "prompt": {
      "syntax": "prompt {message} with {preloaded answer}",
      "description": "Causes a dialog box to appear asking for input. The response box is preloaded with the text given. If the user clicks ~m:Cancel~ an empty string is returned. See also ~l:alert|k~ and ~l:confirm~.",
      "examples": "put prompt `Please give a reason:` with `Rejected` into Reason"
    },
    "color": {
      "syntax": "color {value}",
      "description": "Creates a color item of the form ~m:#abcdef~ from the supplied numeric value.",
      "examples": "put color 12345 into Color"
    },
    "docpath": {
      "syntax": "[the] docpath",
      "description": "This is used with ~l:on|k!on click document~ to trap clicks on all hyperlinks in a block of HTML that was loaded from outside the _**EasyCoder**_ environment. The value returned is the URL minus its domain portion.",
      "examples": "put the docpath into Path"
    },
    "content of": {
      "syntax": "[the] content of {element}",
      "description": "Gets the content of the named element. Some elements can also use ~l:text of![the] text of~ as an alternative syntax.",
      "examples": "put the content of AddressField into Address"
    },
    "text of": {
      "syntax": "[the] text of {element}",
      "description": "Gets the content of the named element. This is an alternative to ~l:content of![the] text of~.",
      "examples": "put the text of AddressField into Address"
    },
    "selected item": {
      "syntax": "[the] selected item in {list}",
      "description": "Returns the selected item in a ~l:select~ element.",
      "examples": "put the selected item in Countries into Country"
    },
    "width": {
      "syntax": "[the] width of {element} ",
      "description": "Gets the width of the named element, relative to the viewport (window, or in the case of mobile, the screen). See also ~l:left~, ~l:right~, ~l:top~, ~l:bottom~ and ~l:height~.",
      "examples": "put the width of Image into Width"
    },
    "height": {
      "syntax": "[the] height of {element}",
      "description": "Gets the height of the named element, relative to the viewport (window, or in the case of mobile, the screen). See also ~l:left~, ~l:right~, ~l:top~, ~l:bottom~ and ~l:width~.",
      "examples": "put the height of Image into Height"
    },
    "location": {
      "syntax": "[the] location",
      "description": "Returns the current location, i.e. the URL of the current page.",
      "examples": "put the location into Here"
    },
    "key": {
      "syntax": "[the] key",
      "description": "Returns the key last pressed. Used in an ~l:on|k!on key~ handler.",
      "examples": "Put the key into K"
    },
    "scroll position": {
      "syntax": "[the] scroll position",
      "description": "Returns the current scroll position of the browser window, which can be used to restore it to the same position later - see ~l:scroll|kscroll!scroll to {position}~.",
      "examples": "Put the scroll position into ScrollPos"
    },
    "parent": {
      "syntax": "[the] parent name/id",
      "description": "Returns either the name or the ~l:index|k~ of the element inside which a click occurs when using ~l:on|k!on click in document~.",
      "examples": "put the parent name into Parent%0aput the parent index into Index"
    },
    "history state": {
      "syntax": "[the] history state",
      "description": "Returns the current history state from the browser history stack. See ~l:history|k~.",
      "examples": "put the history state into State"
    },
    "hostname": {
      "syntax": "[the] hostname",
      "description": "Gets the ~sq~hostname~sq~ property of the current browser location.",
      "examples": "put hostname into HostName%0aif the hostname is `localhost` alert `Running locally!`"
    },
    "screen": {
      "syntax": "[the] screen width/height",
      "description": "Gets the screen width or height",
      "examples": "put the screen width into W%0aput the screen height into H"
    },
    "left": {
      "syntax": "[the] [offset] left of {element}",
      "description": "Gets the position of the leftmost edge of the named element, relative to the viewport (window, or in the case of mobile, the screen). %0a%0aIf ~m:offset~ is given the value returned is the position relative to the component~sq~s immediate parent container.%0a%0aSee also ~l:right~, ~l:top~, ~l:bottom~, ~l:width~, ~l:height~ and ~l:position~.",
      "examples": "put the left of MyImage into Left%0aput the offset left of Text into TextLeft"
    },
    "right": {
      "syntax": "[the] right of {element}",
      "description": "Gets the position of the rightmost edge of the named element, relative to the viewport (window, or in the case of mobile, the screen). See also ~l:left~, ~l:top~, ~l:bottom~, ~l:width~ and ~l:height~.",
      "examples": "put the right of Image into Right"
    },
    "top": {
      "syntax": "[the] [offset] top of {element}",
      "description": "Gets the position of the top edge of the named element, relative to the viewport (window, or in the case of mobile, the screen). %0a%0aIf ~m:offset~ is given the value returned is the position relative to the component~sq~s immediate parent container.%0a%0aSee also ~l:left~, ~l:right~, ~l:bottom~, ~l:width~, ~l:height~ and ~l:position~.",
      "examples": "put the top of Image into Top%0aput the offset top of Text into TextTop"
    },
    "bottom": {
      "syntax": "[the] bottom of {element}",
      "description": "Gets the position of the bottom of the named element, relative to the viewport (window, or in the case of mobile, the screen). See also ~l:left~, ~l:right~, ~l:top~, ~l:width~ and ~l:height~.",
      "examples": "put the bottom of Image into Bottom"
    },
    "position": {
      "syntax": "[the] pick/drag position",
      "description": "The retrieves the position of the last mouse click, or of the position while dragging a component. The returned value is a JSON string with properties ~m:x~ and ~m:y~.%0a%0aThese values are useful when implementing drag-and-drop (see ~l:on|k~) as they tell you how far the component has been moved from its starting position. See also ~l:left~ and ~l:top~.",
      "examples": "put the pick position into PickPos%0aput the drag position into DragPos"
    }
  },
  "conditions": {
    "confirm": {
      "syntax": "if confirm {prompt} ...",
      "description": "Puts up a confirmation dialog with the prompt message given. If the user clicks OK the result is ~m:true~, otherwise ~m:false~.",
      "examples": "if confirm `Are you sure, ` cat MyName go to DoIt"
    },
    "has [the] focus": {
      "syntax": "if element {element} has [the] focus ...",
      "description": "Tests if the specified element has the focus.",
      "examples": "if element NameInput has the focus go to ClearName"
    },
    "mobile": {
      "syntax": "if mobile ...",
      "description": "Tests if the browser is running on a smartphone.",
      "examples": "if mobile go to DoMobileVersion"
    },
    "exists": {
      "syntax": "if {element} exists ...",
      "description": "Tests if the ~m:element~ in question exists.",
      "examples": "if Price exists add Price to Total"
    }
  },
  "": {
    "alert": {
      "syntax": "alert {message}",
      "description": "~m:alert~ causes a popup dialog to appear, with the specified message. The browser then blocks until the dialog box is dismissed.",
      "examples": "alert `The name is ` cat Name"
    },
    "attach": {
      "syntax": "attach {variable} to {css id}",
      "description": "Each of the DOM variable types (~l:a~, ~l:div~, ~l:input~ etc) must be attached to an element already in the page and identified by its CSS id, before they can be used. Alternatively, you can ~l:create~ the element as a child of another DOM variable.%0a%0aThese two options allow you to build your page in HTML and attach _**EasyCoder**_ variables to the parts you want, or to build the whole structure in code and attach it to a single DOM element.",
      "examples": "attach Container to `ec-container`"
    },
    "a": {
      "syntax": "a {name}",
      "description": "This declares a hyperlink variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "a MyName"
    },
    "button": {
      "syntax": "button {name}",
      "description": "This declares a ~m:&lt;button&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "button OKButton"
    },
    "div": {
      "syntax": "div {name}",
      "description": "This declares a ~m:&lt;div&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "div Container"
    },
    "file": {
      "syntax": "file {name}",
      "description": "This declares a ~m:&lt;file&gt;~ variable, used in an image uploader. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.%0a%0aFor an example of uploading, see the File Manager in the [Here On The Map](https://hereonthemap.com) project.",
      "examples": "file GetFile"
    },
    "form": {
      "syntax": "form {name}",
      "description": "This declares a ~m:&lt;form&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "form Form"
    },
    "h1": {
      "syntax": "h1 {name}",
      "description": "This declares a ~m:&lt;h1&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "h1 Level1Header"
    },
    "h2": {
      "syntax": "h2{name}",
      "description": "This declares a ~m:&lt;h2&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "h2 Level2Header"
    },
    "h3": {
      "syntax": "h3 {name}",
      "description": "This declares a ~m:&lt;h3&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "h3 Level3Header"
    },
    "h4": {
      "syntax": "h4 {name}",
      "description": "This declares a ~m:&lt;h4&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "h4 Level4Header"
    },
    "h5": {
      "syntax": "h5 {name}",
      "description": "This declares a ~m:&lt;h5&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "h5 Level5Header"
    },
    "h6": {
      "syntax": "h6 {name}",
      "description": "This declares a ~m:&lt;h6&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "h6 Level6Header"
    },
    "label": {
      "syntax": "label {name}",
      "description": "This declares a ~m:&lt;label&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "label NameLabel"
    },
    "p": {
      "syntax": "p {name}",
      "description": "This declares a ~m:&lt;p&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "p FirstParagraph"
    },
    "img": {
      "syntax": "img {name}",
      "description": "This declares an ~m:&lt;img&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~",
      "examples": "img Flag"
    },
    "input": {
      "syntax": "input {name}",
      "description": "This declares an ~m:&lt;input&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~",
      "examples": "input NameField"
    },
    "ul": {
      "syntax": "ul {name}",
      "description": "This declares a ~m:&lt;ul&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~",
      "examples": "ul Countries"
    },
    "li": {
      "syntax": "li {name}",
      "description": "This declares a ~m:&lt;li&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~",
      "examples": "li ListItem"
    },
    "select": {
      "syntax": "select {name}",
      "description": "This declares a ~m:&lt;select&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~",
      "examples": "select CountryList"
    },
    "span": {
      "syntax": "span {name}",
      "description": "This declares a ~m:&lt;span&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~",
      "examples": "span InlineText"
    },
    "pre": {
      "syntax": "pre {name}",
      "description": "This declares a ~m:&lt;pre&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~",
      "examples": "pre Preformatted"
    },
    "popup": {
      "syntax": "popup {name}",
      "description": "This declares a ~m:&lt;popup&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.%0a%0aA variable type to represent a section of HTML code as a popup that floats above the page and disappears when the user clicks outside its main area. These are used primarily for menus.",
      "examples": "popup MyPopup%0aattach MyPopup to `ec-popup-menu`"
    },
    "textarea": {
      "syntax": "textarea {name}",
      "description": "This declares a ~m:&lt;textarea&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "textarea FreeText"
    },
    "audioclip": {
      "syntax": "audioclip {name}",
      "description": "This declares an ~m:&lt;audioclip&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.%0a%0aSee also ~l:play~.",
      "examples": "audioclip Buzz"
    },
    "clear": {
      "syntax": "clear {DOM element}",
      "description": "Removes all the content from the named element.",
      "examples": "clear Container"
    },
    "convert": {
      "syntax": "convert whitespace in {element} to print/html",
      "description": "This deals mainly with ~l:textarea~ data that contains line breaks, which render as %d%a sequences when used in emails, for example. This command replaces them with appropriate line breaks for printing or for use in HTML. Some experimentation will usually be needed in such cases.",
      "examples": "convert whitespace in MyText to print"
    },
    "create": {
      "syntax": "create {dom variable} in {parent}%0acreate {audioclip} from {url}",
      "description": "1. Creates a DOM object, adding it to the named parent (which must already exist in the DOM).%0a%0a2. Creates an ~l:audioclip~ from any reachable URL.",
      "examples": "create MyButton in Container%0acreate Buzz from `https://sample.com/audio/buzzer.mp3`"
    },
    "disable": {
      "syntax": "disable {dom element}",
      "description": "Sets the ~m:disabled~ property of the named DOM variable to ~m:true~. See ~l:enable~.",
      "examples": "disable DeleteButton"
    },
    "enable": {
      "syntax": "enable {dom element}",
      "description": "Sets the ~m:disabled~ property of the named DOM variable to ~m:false~. See ~l:disable~.",
      "examples": "enable DeleteButton"
    },
    "get": {
      "syntax": "get {variable} from storage as {key}%0aget {variable } from {form}",
      "description": "1. Gets a value from the browser storage, accessed by its key name. Browser storage is very useful for remembering settings from a previous visit to the page. See also ~l:put!put into storage~. Web storage is per origin (domain and protocol). All pages from one origin can store and access the same data.%0a%0a2. Gets all the field data from the named form as a JSON string. Elements such as ~l:textarea~ will have line breaks replaced by ~m:&ldquo;&amp;0a;&rdquo;~ to prevent them causing problems elsewhere, so you may need to ~l:convert~ them later on.",
      "examples": "get Mode from storage as `mode-assisted`%0aget TheData from MyForm"
    },
    "section": {
      "syntax": "section {name}",
      "description": "This declares a ~m:&lt;section&gt;~ variable. You can either attach it to a corresponding element in the HTML or create a new element; see ~l:attach~ and ~l:create~.",
      "examples": "section SideBar"
    },
    "history": {
      "syntax": "history set/replace/push [url {url}] [state {state}]%0ahistory pop/back/forward",
      "description": "~m:history~ manipulates the browser history stack. This is a complex and rather confusing subject so it~sq~s best to study examples.%0a%0a~m:set~ and ~m:replace~ are identical. They ~sq~mark~sq~ the history stack to provide a point to return to when the user clicks the browser Back button.%0a%0a~m:pop~ and ~m:back~ are also identical. They have the same effect as clicking the browser Back button.%0a%0a~m:push~ adds a new frame to the browser history stack.%0a%0aThe ~m:url~value contains the SEO string to add to the browser~sq~s address bar.%0a%0aThe ~m:state~ value typically contains a JSON string with enough information to restore the state to what it was prior to calling ~m:push~.%0a%0aIf you use ~m:pop~, don~sq~t be tempted to add any other functionality because if the user clicks Back the script won~sq~t know anything about it.",
      "examples": "history set state CurrentState%0ahistory push url `help` state State%0ahistory back"
    },
    "location": {
      "syntax": "location {url}",
      "description": "Go to a new location. Sets the browser address to the given ~m:url~; a kind of ~m:GOTO~ for the browser.",
      "examples": "location `https://hereonthemap.com`"
    },
    "mail": {
      "syntax": "mail to {recipient} subject {subject} message {message}",
      "description": "This requests the system to create a new email, addressed to the named ~m:recipient~, with the given ~m:subject~ and containing the given ~m:message~. The user can then complete the email and send it.%0a%0aThere is no mechanism in JavaScript for sending emails directly. This is one way around it; the other is to use the REST server with this endpoint:%0a%0a~m:{site root}/wp-content/plugins/easycoder/rest.php/_email~%0a%0aThe endpoint expects a payload to be provided in the form of a JSON object with the fields ~m:from~, ~m:to~, ~m:subject~ and ~m:message~.",
      "examples": "mail to `xyz@mail.com`%0a&nbsp;&nbsp;subject `Your enquiry`%0a&nbsp;&nbsp;message MyMessage"
    },
    "on": {
      "syntax": "on change {list} ...%0aon click document ...%0aon click {element} ...%0aon key ...%0aon browser back ...%0aon swipe left/right ...",
      "description": "",
      "examples": "on change Countries go to SelectCountry%0aon click HelpButton go to ShowHelp%0aon click document go to ShowHelp%0aon key go to ProcessKey%0aon browser back go to RestorePage%0aon swipe left go to Next"
    },
    "put": {
      "syntax": "put {value} into storage as {name}",
      "description": "Puts an item of data into browser local storage, where it can be retrieved at any time by the same computer using the same page. See also ~l:get!get from storage~.%0a%0aWeb storage is per origin (domain and protocol). All pages from one origin can store and access the same data.",
      "examples": "put `Admin` into storage as UserName%0aput `https://google.com` into storage as SearchURL"
    }
  }
}