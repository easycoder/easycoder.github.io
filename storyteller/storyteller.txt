!   Storyteller main script

    script Storyteller
    
    div Tracer
    div Body
    div Container
    div Content
    div TitleDiv
    div ButtonBar
    div TopicText
    div ImageDiv
    div Mask
    div PicDiv
    img BigPic
    img TopImage
    img MidImage
    img BottomImage
    img HomeButton
    img BackButton
    img ForwardButton
    img InfoButton
    img Image
    a Link
    select Select
    option Option
    callback DecoratorCallback
    variable Mobile
    variable Themes
    variable Theme
    variable Layout
    variable BorderL
    variable BorderT
    variable BorderR
    variable BorderB
    variable BorderLeft
    variable BorderTop
    variable BorderRight
    variable BorderBottom
    variable AspectW
    variable AspectH
    variable ID
    variable TID
    variable Record
    variable C
    variable N
    variable M
    variable P
    variable Margin
    variable WindowWidth
    variable WindowHeight
    variable Width
    variable Height
    variable ButtonSize
    variable Title
    variable Payload
    variable Function
    variable Data
    variable Display
    variable Attributes
    variable Source
    variable Class
    variable Classes
    variable Options
    variable List
    variable LinkCount
    variable SelectCount
    variable ImageCount
    variable Value
    variable DataID
    variable Prefix
    variable Topic
    variable Item
    variable Stack
    variable StackPointer
    variable FontScale
    variable FontSize
    
    clear Mobile
    if mobile
    begin
    	if portrait set Mobile
    end
    
    gosub to GetStyles
    
	attach Body to body
    clear Body
    set the style of Body to `overflow:hidden`
    
    create Tracer in Body
    set the id of Tracer to `easycoder-tracer`
    
    create Container in Body
    set style `position` of Container to `relative`
    set style `width` of Container to `100%`
    set style `height` of Container to `100%`
    
    create MidImage in Container
    create TopImage in Container
    create BottomImage in Container
    create Content in Container
    set style `position` of Content to `absolute`
    create TitleDiv in Content
    create ButtonBar in Content
    create TopicText in Content
    
    rest get Title from `/stories/title.txt`
    set the title to Title

    gosub to SetupTheme
    gosub to CreateButtons
    gosub to SetStyles
    
    create Mask in Container
    set the style of Mask to `position:absolute;top:0;left:0;width:100%;height:100%;`
    	cat `opacity:70%;background:black;display:none`
    create PicDiv in Container
    set the style of PicDiv to
    	`position:absolute;top:0;left:0;text-align:center;width:100%;height:100%;display:none`
    create BigPic in PicDiv
    
    on window resize gosub to SetStyles
    
	load showdown
  	on DecoratorCallback go to Decorate

    get ID from storage as `id`
    if ID is empty put `home` into ID
    get TID from storage as `tid`
    if TID is empty put `content` into TID
    
    put 0 into StackPointer

!	View a record, given its Subject and Topic ids.
ViewRecord:
	scroll TopicText to 0
    rest get Record from `/stories/` cat ID cat `/content.txt`
    or begin
    	put `home` into ID
        put `content` into TID
        continue
    end

! 	Add this topic to the stack
    put ID cat `/` cat TID into Stack
    if StackPointer is greater than 0 set style `display` of BackButton to `inline-block`

!	Get the content
    set the style of TitleDiv to `text-align:center;font-size:1.6em;font-weight:bold`
    if Mobile
    begin
	    multiply ButtonSize by 10 giving N
	    divide N by 9
	   	set style `margin-top` of TitleDiv to N cat `px`
    end
    rest get Title from `/stories/` cat ID cat `/title.txt`
    if Title is empty
    	put ID into Title
        continue
    end
    set the content of TitleDiv to Title

    rest get Topic from `/stories/` cat ID cat `/` cat TID cat `.txt`
    or begin
    	put `content` into TID
        rest get Topic from `/stories/` cat ID cat `/` cat TID cat `.txt`
        continue
    end
    
!	Remember where we are
    put ID into storage as `id`
    put TID into storage as `tid`

    set the style of TopicText to 
    	`width:100%;height:calc(100% - 5em);background:none;overflow-y: auto`
            cat `;padding-right:1em`

!	Handle the links created by the showdown extension
    put 0 into LinkCount
    put 0 into ImageCount
    put 0 into SelectCount
    set the content of TopicText to showdown decode Topic with DecoratorCallback

!	Process links
    set the elements of Link to LinkCount
    put 0 into N
    while N is less than LinkCount
    begin
        index Link to N
        attach Link to `ec-link-` cat N
        add 1 to N
    end
    on click Link
    begin
        put attribute `data-id` of Link into DataID
        if DataID is `theme`
        begin
        	rest get Themes from `/stories/themes/themes.txt`
            json split Themes on newline into Themes
            put `Here are the available themes:` cat newline into Item
            put 0 into N
            while N is less than the json count of Themes
            begin
            	if N is not 0 put Item cat `, ` into Item
            	put Item cat element N of Themes into Item
            	add 1 to N
            end
            put Item cat newline cat newline cat `You are currently using the '` cat Theme cat `' theme.` into Item
            put Item cat newline cat `Please type the name of the theme you want to use:` into Item
            put prompt Item into Item
            if Item is not empty
            begin
            	put Item into Theme
                put Theme into storage as `theme`
                gosub to SetupTheme
            end
        end
        else
        begin
          put left 1 of DataID into Prefix
          if Prefix is `S`
          begin
              put from 1 of DataID into ID
              put `content` into TID
              go to ViewAnotherRecord
          end
          else if Prefix is `T`
          begin
              put from 1 of DataID into TID
              go to ViewAnotherRecord
          end
      end
    end

!	Process images
    set the elements of ImageDiv to ImageCount
    set the elements of Image to ImageCount
    put 0 into N
    while N is less than ImageCount
    begin
        index ImageDiv to N
        index Image to N
        attach ImageDiv to `ec-imagediv-` cat N
        attach Image to `ec-image-` cat N
        add 1 to N
    end
    on click Image
    begin
        put attribute `data-options` of Image into Options
        if the position of `nolink` in Options is -1
        begin
            set style `display` of Mask to `block`
            set style `display` of PicDiv to `block`
            set the style of BigPic to `max-width:93%;max-height:93%;margin-top:2%`
            put attribute `src` of Image into Source
            set attribute `src` of BigPic to Source
            on click PicDiv go to ClearBigPic
            on click BigPic go to ClearBigPic
        end
    end

!	Process selectors
    set the elements of Select to SelectCount
    put 0 into N
    while N is less than SelectCount
    begin
    	index Select to N
    	attach Select to `ec-select-` cat N
        put attribute `data-options` of Select into Options
		json split Options on `|` into List
        put 0 into M
        while M is less than the json count of List
        begin
            create Option in Select
        	put element M of List into Value
            put Value into Display
            put the position of `:` in Value into P
            if P is not -1
            begin
            	put left P of Value into Value
                add 1 to P
                put from P of Display into Display
            end
            set attribute `data-st` of Option to left 1 of Value
            put from 1 of Value into Value
            put Display into Attributes
            put the position of `!` in Display into P
            if P is -1 put empty into Attributes
            else
            begin
            	put left P of Display into Display
                add 1 to P
                put from P of Attributes into Attributes
            end
            set the content of Option to Display
            if Attributes is not empty set the attributes of Option to Attributes
            set attribute `value` of Option to Value
        	add 1 to M
        end
    	add 1 to N
    end
    on change Select
    begin
        get Option from Select
        put attribute `data-st` of Option into Function
        put attribute `value` of Option into Value
        if Function is `S`
        begin
	        put Value into ID
	        put `content` into TID
	        go to ViewAnotherRecord
        end
        else
        begin
	        put Value into TID
	        go to ViewAnotherRecord
        end
    end
 	stop

!	Set up the theme
SetupTheme:
	get Theme from storage as `theme`
    if Theme is empty rest get Theme from `/stories/themes/theme.txt`
    rest get Layout from `/stories/themes/` cat Theme cat `/theme.json`
    put property `aspect-w` of Layout into AspectW
    put property `aspect-h` of Layout into AspectH
    put property `border-l` of Layout into BorderL
    put property `border-r` of Layout into BorderR
    put property `border-t` of Layout into BorderT
    put property `border-b` of Layout into BorderB
    put property `font-scale` of Layout into FontScale
    set attribute `src` of MidImage to `/stories/themes/` cat Theme cat `/mid.jpg`
    set attribute `src` of TopImage to `/stories/themes/` cat Theme cat `/top.jpg`
    set attribute `src` of BottomImage to `/stories/themes/` cat Theme cat `/bottom.jpg`
	return

!	Create the buttons at the top of the panel
CreateButtons:
	set style `position` of ButtonBar to `relative`
	set style `margin` of ButtonBar to `0 1em 0.5em 1em`
	create HomeButton in ButtonBar
    set attribute `src` of HomeButton to `https://easycoder.github.io/storyteller/icons/home.png`
    on click HomeButton
    begin
        put `home` into ID
        put `content` into TID
        go to ViewAnotherRecord
    end

	create BackButton in ButtonBar
    set style `display` of BackButton to `none`
    set attribute `src` of BackButton to `https://easycoder.github.io/storyteller/icons/arrow-back.png`
    on click BackButton
    begin
        put the elements of Stack into N
        take 1 from N
!        set the elements of Stack to N
        take 1 from StackPointer
        index Stack to StackPointer
        put the position of `/` in Stack into N
        if N is -1 stop
        put left N of Stack into ID
        add 1 to N
        put from N of Stack into TID
        if StackPointer is 0 set style `display` of BackButton to `none`
        set style `display` of ForwardButton to `inline-block`
        go to ViewRecord
    end

	create ForwardButton in ButtonBar
    set style `display` of ForwardButton to `none`
    set attribute `src` of ForwardButton to `https://easycoder.github.io/storyteller/icons/arrow-forward.png`
    on click ForwardButton
    begin
!trace Stack StackPointer N vertical
!trace
        put the elements of Stack into N
        take 1 from N
        if N is StackPointer stop
        add 1 to StackPointer
        if StackPointer is N set style `display` of ForwardButton to `none`
        set style `display` of BackButton to `inline-block`
        index Stack to StackPointer
        put the position of `/` in Stack into N
        if N is -1 stop
        put left N of Stack into ID
        add 1 to N
        put from N of Stack into TID
        go to ViewRecord
    end

	create InfoButton in ButtonBar
    set attribute `src` of InfoButton to `https://easycoder.github.io/storyteller/icons/info.png`
    on click InfoButton
    begin
        put `info` into ID
        put `content` into TID
        go to ViewAnotherRecord
    end

	return

!	View another record, given the Subject and Topic ids
ViewAnotherRecord:
    add 1 to StackPointer
    add 1 to StackPointer giving N
    set the elements of Stack to N
    index Stack to StackPointer
    set style `display` of ForwardButton to `none`
    go to ViewRecord 

!	Remove the mask and overlay image
ClearBigPic:
    set style `display` of Mask to `none`
    set style `display` of PicDiv to `none`
	stop

!	Responsive design: Compute the size and position of all the screen elements
SetStyles:
    put the width of window into WindowWidth
    put the height of window into WindowHeight
    
!	Choose an optimum width based on the window height
	put WindowHeight into Height
	multiply Height by AspectW giving Width
    divide Width by AspectH

!	Make sure the window is wide enough
    take Width from WindowWidth giving Margin
    divide Margin by 2
    if Margin is less than 0
    begin
    	put 0 into Margin
        put WindowWidth into Width
    end
    
!	Style the Container
    set style `left` of Container to Margin cat `px`
    set style `top` of Container to 0
	set style `width` of Container to Width cat `px`
    set style `height` of Container to Height cat `px`
    
!	Style the background images
    set the style of MidImage to `position:absolute;left:0;top:0;width:` cat Width
    	cat `px;height:` cat `calc(` cat Height cat `px - 2vh)`
    set the style of TopImage to `position:absolute;left:0;top:0;width:` cat Width cat `px`
    set the style of BottomImage to `position:absolute;left0;bottom:2vh;width:` cat Width cat `px`

!	Calculate the borders
    multiply Width by BorderL giving BorderLeft
    multiply Width by BorderR giving BorderRight
    divide BorderLeft by 100
    divide BorderRight by 100
    take BorderLeft from Width
    take BorderRight from Width

    multiply Height by BorderT giving BorderTop
    multiply Height by BorderB giving BorderBottom
    divide BorderTop by 100
    divide BorderBottom by 100
	take BorderTop from Height
    take BorderBottom from Height

    divide Width by 20 giving ButtonSize
    
    set style `height` of ButtonBar to ButtonSize cat `px`

!	Style the buttons
    if Mobile multiply ButtonSize by 2
    set style `position` of HomeButton to `absolute`
    set style `left` of HomeButton to 0
    set style `top` of HomeButton to 0
    set style `width` of HomeButton to ButtonSize cat `px`
    set style `height` of HomeButton to ButtonSize cat `px`

	multiply ButtonSize by 3 giving M
    divide M by 2
    put M into N
    set style `position` of BackButton to `absolute`
    set style `left` of BackButton to N
    set style `top` of BackButton to 0
    set style `width` of BackButton to ButtonSize cat `px`
    set style `height` of BackButton to ButtonSize cat `px`

	add M to N
    set style `position` of ForwardButton to `absolute`
    set style `left` of ForwardButton to N
    set style `top` of ForwardButton to 0
    set style `width` of ForwardButton to ButtonSize cat `px`
    set style `height` of ForwardButton to ButtonSize cat `px`

    set style `position` of InfoButton to `absolute`
    set style `right` of InfoButton to 0
    set style `top` of InfoButton to 0
    set style `width` of InfoButton to ButtonSize cat `px`
    set style `height` of InfoButton to ButtonSize cat `px`

!	Style the content
    set style `left` of Content to BorderLeft cat `px`
    set style `top` of Content to BorderTop cat `px`
    set style `width` of Content to Width cat `px'
    set style `height` of Content to Height cat `px'

!	Compute the font size
    divide Height by FontScale giving FontSize
    set style `font-size` of Container to FontSize cat `px`
    return

!------------------------------------------------------------------------------
!	This is the Showndown extension.

!	Decorate is called for every occurrence of ~...~ in the topic data
Decorate:
    put the payload of DecoratorCallback into Payload
    put the position of `:` in Payload into N
    if N is -1
    begin
    	if Payload is `clear` gosub to ProcessClear
    end
    else
    begin
        put left N of Payload into Function
        add 1 to N
        put from N of Payload into Data
        if Function is `sid` gosub to ProcessSID
        else if Function is `tid` gosub to ProcessTID
        else if Function is `img` gosub to ProcessImage
        else if Function is `select` gosub to ProcessSelect
        else if Function is `space` gosub to ProcessSpace
        else if Function is `comment` gosub to ProcessComment
        else if Function is `theme` gosub to ProcessTheme
    end
    set the payload of DecoratorCallback to Payload
    stop

!	Process a request for a new subject
ProcessSID:
	put Data into Display
    put the position of `:` in Data into N
    if N is not -1
    begin
	    put left N of Data into Data
	    add 1 to N
	    put from N of Display into Display
    end
    put `<a href="#" id="ec-link-` cat LinkCount cat `" class="button"`
    	cat ` data-id="S` cat Data cat `">` cat Display cat `</a>` into Payload
    add 1 to LinkCount
    return

!	Process a request for a new topic
ProcessTID:
	put Data into Display
    put the position of `:` in Data into N
    if N is not -1
    begin
	    put left N of Data into Data
	    add 1 to N
	    put from N of Display into Display
    end
    put `<a href="#" id="ec-link-` cat LinkCount cat `" class="button"`
    	cat `" data-id="T` cat Data cat `">` cat Display cat `</a>` into Payload
    add 1 to LinkCount
    return

!	Process an image, including positioning and class infomation
ProcessImage:
	put empty into Options
	put the position of `/` in Data into N
    if N is -1 put ID into Source
    else
    begin
    	put left N of Data into Source
        add 1 to N
        put from N of Data into Data
    end
    put the position of `:` in Data into N
    put empty into Class
    if N is not -1 
    begin
        put Source cat `/images/` cat left N of Data into Source
        add 1 to N
        if Data is not empty
        begin
        	if Class is not empty put Class cat ` ` into Class 
        	put Class cat from N of Data into Class
        end
        put the position of `!` in Class into N
        if N is not -1
        begin
        	put Class into Options
            put left N of Class into Class
            add 1 to N
            put from N of Options into Options
        end
    end
    json split Class on ` ` into Classes
    put empty into Class
    put 0 into N
    while N is less than the json count of Classes
    begin
    	put element N of Classes into C
        if C is `border` begin end
        else if C is `left` begin end
        else if C is `right` begin end
        else if C is `center` begin end
        else if C is `10%` put `pc10` into C
        else if C is `25%` put `pc25` into C
        else if C is `33%` put `pc33` into C
        else if C is `50%` put `pc50` into C
        else if C is `90%` put `pc90` into C
        else if C is `100%` put `pc100` into C
        else
        begin
        	alert `Unknown style ` cat C
            return
        end
        if Class is not empty put Class cat ` ` into Class
        put Class cat C into Class
    	add 1 to N
    end
    put `<div id="ec-imagediv-` cat ImageCount into Payload
    if Class is not empty put Payload cat `" class="` cat Class into Payload
    if the position of `nolink` in Options is not -1
    begin
        put Payload cat `">` cat `<img id="ec-image-` cat ImageCount cat `" src="stories/` cat Source
            cat `" style="width:100%" ></div>` into Payload
    end
    else
    begin
        put Payload cat `">` cat `<a href="#">`
            cat `<img id="ec-image-` cat ImageCount cat `" src="stories/` cat Source
            cat `" style="width:100%" ></a></div>` into Payload
    end
    add 1 to ImageCount
    return

!	Process a 'clear'
ProcessClear:
    put `<div style="height:1px;clear:both"></div>` into Payload
    return

!	Process a 'select'
ProcessSelect:
    put `<select id="ec-select-` cat SelectCount cat `"`
    	cat ` data-options="` cat Data cat `"`
    	cat `></select>` into Payload
    add 1 to SelectCount
    return

!	Process a space
ProcessSpace:
	if Mobile put `<br>` into Payload
    else
    begin
		put empty into Payload
		put the value of Data into M
	    put 0 into N
	    while N is less than M
	    begin
	    	put Payload cat `&nbsp;` into Payload
	        add 1 to N
	    end
    end
    return

!	Process a 'comment'
ProcessComment:
    put empty into Payload
    return

!	Process a 'theme'
ProcessTheme:
	put Data into Display
    put the position of `:` in Data into N
    if N is not -1
    begin
	    put left N of Data into Data
	    add 1 to N
	    put from N of Display into Display
    end
    put `<a href="#" id="ec-link-` cat LinkCount cat `" class="button"`
    	cat `" data-id="theme">` cat Display cat `</a>` into Payload
    add 1 to LinkCount
    return

!   Put all the styles needed into the head
GetStyles:
!   Set the font size of all selectors
    set style `select` to `{font-size:1em}`
!   Force its owner to sit below all previous content
    set style `.clear` to `{clear:both}`
!   Image border and padding
    set style `.border` to `{padding:2px;border:1px solid black}`
!   Float left with a margin all round
    set style `.left` to `{float:left;margin:0.5em}`
!   Float right with a margin all round
    set style `.right` to `{float:right;margin:0.5em}`
!   Put the item in the centre of the page
    set style `.center` to `{margin:0 auto}`
!   Set the item width to 10% of the page width
    set style `.pc10` to `{width:10%}`
!   Set the item width to 25% of the page width
    set style `.pc25` to `{width:25%}`
!   Set the item width to 33% of the page width
    set style `.pc33` to `{width:33%}`
!   Set the item width to 50% of the page width
    set style `.pc50` to `{width:50%}`
!   Set the item width to 90% of the page width
    set style `.pc90` to `{width:90%}`
!   Set the item width to 100% of the page width
    set style `.pc100` to `{width:100%}`
    return