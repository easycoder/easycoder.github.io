<h2>The tracer</h2><p>The hardest part about programming is figuring out why things don&#39;t work as expected, and for many of us this is much of the time. To help with this, development systems usually have some kind of ability to stop a running program, examine its variables and step through the instructions one by one. Your browser has a very good debugger but all it will tell you is what&#39;s happening inside the <span style="color:#660000"><strong>E</strong></span><span style="color:#000099"><strong>asy</strong></span><span style="color:#660000"><strong>C</strong></span><span style="color:#000099"><strong>oder</strong></span> engine, not what your script is doing. So we added a feature that will do these things. It&#39;s a little basic but there are times when it can help a lot.</p><p>The <span style="color:#660000"><strong>E</strong></span><span style="color:#000099"><strong>asy</strong></span><span style="color:#660000"><strong>C</strong></span><span style="color:#000099"><strong>oder</strong></span> tracer needs you to tell it where it can display its information, and this is done in your script itself. Referring back to the bouncy rectangle, here&#39;s the same script with some tracer code added:</p><div id="clear" style="display:none">y</div><div id="code"> </div><div style="color:#660000; text-align:center"><a href="#" id="copy">Load example code into the editor</a></div><p>At the top we have an additional <span style="color:#660000"><span style="font-family:Courier New,Courier,monospace">div</span></span> called <span style="color:#660000"><span style="font-family:Courier New,Courier,monospace">Tracer</span></span>. The first thing the script does is create this <span style="color:#660000"><span style="font-family:Courier New,Courier,monospace">div</span></span>, giving it a specific id; a special value that <span style="color:#660000"><strong>E</strong></span><span style="color:#000099"><strong>asy</strong></span><span style="color:#660000"><strong>C</strong></span><span style="color:#000099"><strong>oder</strong></span> knows about.</p><p>Later in the program, at the start of the main loop, we want to start examining our running script. In this example there are only 2 things we can ask for information about; the values of Angle and Height. You can only ask for the values of ordinary numeric/string <span style="color:#660000"><span style="font-family:Courier New,Courier,monospace">variable</span></span>s; to cater for other types would hugely add to the size of <span style="color:#660000"><strong>E</strong></span><span style="color:#000099"><strong>asy</strong></span><span style="color:#660000"><strong>C</strong></span><span style="color:#000099"><strong>oder</strong></span> for something that&#39;s relatively infrequently used. At line 26, the first <span style="color:#660000"><span style="font-family:Courier New,Courier,monospace">trace</span></span> command takes a list of the variables we want to inspect and states whether they should be presented horizontally on one line or vertically. This command is optional; sometimes you only want to know where you are without needing to know any variable values.</p><p>The second <span style="color:#660000"><span style="font-family:Courier New,Courier,monospace">trace</span></span> command causes the program to stop when it reaches it. It displays the variables you asked for plus the last 5 lines executed prior to reaching the <span style="color:#660000"><span style="font-family:Courier New,Courier,monospace">trace</span></span> command, then stops. You can ask it to continue one step or to run again without stopping.</p><p>If you run this script you&#39;ll see this happening, and when you step through the code the values of Angle and Height will increase, one faster than the other.</p><p>Once you have diagnosed and fixed whatever problem you were having you can remove the tracer code and the program will run normally.</p><h2>Next: <a href="#" id="next">Interactivity</a></h2>