!   Record editor

    script Editor
    
    import variable ID
    
    div Body
    div Form
    div Title
    div Row
    div Input
    div Parents
    div Buttons
    div ButtonGroup
    span Label
    input GivenName
    input OtherNames
    input FamilyName
    input GenderM
    input GenderF
    input GenderO
    input DOB
    input DOD
    input POB
    input Comment
    button NewRecordButton
    button ViewRecordButton
    button SaveRecordButton
    button CloseButton
    variable Index
    variable Item
    variable Record
    variable Mode
    variable D
    variable G
    variable Script
    variable ISODateScript
    variable Message
    module ParentsModule
    module ChildrenModule

EditRecord:
    rest get Index from `index.json`
	rest get ISODateScript from `/ecs/isodate.ecs`
    rest get Record from `/map/` cat ID cat `.json` or go to NewRecord
    put `edit` into Mode

ER2:
	clear body
    create Body in body
    
    create Form in Body
    set the style of Form to
    	`width:100%;max-width:800px;margin:1em auto 0 auto;border:1px solid lightgray`
        cat `;padding:0 0.5em 0.5em 0.5em`

    create Title in Form
    set the style of Title to `text-align:center;font-size:1.1em;font-weight:bold;margin-top:0.5em`
    set the content of Title to `Record editor`

	create Row in Form
    set the class of Row to `rowstyle`
    create Label in Row
    set the class of Label to `labelstyle`
    set the content of Label to `Given name:`
    create Input in Row
    set the class of Input to `inputstyle`
    create GivenName in Input
    set the style of GivenName to `width:100%`
    put property `gname` of Record into Item
    if Item is not empty set the content of GivenName to Item

	create Row in Form
    set the class of Row to `rowstyle`
    create Label in Row
    set the class of Label to `labelstyle`
    set the content of Label to `Other names:`
    create Input in Row
    set the class of Input to `inputstyle`
    create OtherNames in Input
    set the style of OtherNames to `width:100%`
    put property `oname` of Record into Item
    if Item is not empty set the content of OtherNames to Item

	create Row in Form
    set the class of Row to `rowstyle`
    create Label in Row
    set the class of Label to `labelstyle`
    set the content of Label to `Family name:`
    create Input in Row
    set the class of Input to `inputstyle`
    create FamilyName in Input
    set the style of FamilyName to `width:100%`
    put property `fname` of Record into Item
    if Item is not empty set the content of FamilyName to Item
    
    create Row in Form
    set the class of Row to `rowstyle`
    create Label in Row
    set the class of Label to `labelstyle`
    set the content of Label to `Gender`
    create ButtonGroup in Row
    create GenderM in ButtonGroup
    set the style of GenderM to `display:inline-block`
    set attribute `type` of GenderM to `radio`
    set attribute `name` of GenderM to `gender`
    set attribute `value` of GenderM to `m`
    create Label in ButtonGroup
    set the content of Label to `&nbsp;Male`
    create GenderF in ButtonGroup
    set the style of GenderF to `display:inline-block`
    set attribute `type` of GenderF to `radio`
    set attribute `name` of GenderF to `gender`
    set attribute `value` of GenderF to `f`
    create Label in ButtonGroup
    set the content of Label to `&nbsp;Female`
    create GenderO in ButtonGroup
    set the style of GenderO to `display:inline-block`
    set attribute `type` of GenderO to `radio`
    set attribute `name` of GenderO to `gender`
    set attribute `value` of GenderO to `o`
    create Label in ButtonGroup
    set the content of Label to `&nbsp;Other`
    put property `gender` of Record into G
    if G is `m` set attribute `checked` of GenderM to `checked`
    else if G is `f` set attribute `checked` of GenderF to `checked`
    else set attribute `checked` of GenderO to `checked`

	create Row in Form
    set the class of Row to `rowstyle`
    create Label in Row
    set the class of Label to `labelstyle`
    set the content of Label to `Date of Birth:`
    create Input in Row
    set the class of Input to `inputstyle`
    create DOB in Input
    set the style of DOB to `width:10em`
    put property `dob` of Record into Item
    if Item is not empty set the content of DOB to Item

	create Row in Form
    set the class of Row to `rowstyle`
    create Label in Row
    set the class of Label to `labelstyle`
    set the content of Label to `Place of Birth:`
    create Input in Row
    set the class of Input to `inputstyle`
    create POB in Input
    set the style of POB to `width:100%`
    put property `pob` of Record into Item
    if Item is not empty set the content of POB to Item

	create Row in Form
    set the class of Row to `rowstyle`
    create Label in Row
    set the class of Label to `labelstyle`
    set the content of Label to `Date of Death:`
    create Input in Row
    set the class of Input to `inputstyle`
    create DOD in Input
    set the style of DOD to `width:10em`
    put property `dod` of Record into Item
    if Item is not empty set the content of DOD to Item

	create Parents in Form
    rest get Script from `/ecs/parents.ecs`
    run Script with Parents and Record as ParentsModule
    send `fill` to ParentsModule
    
    create Row in Form
    set the class of Row to `rowstyle`
    create Label in Row
    set the class of Label to `labelstyle`
    set the content of Label to `Comment:`
    create Input in Row
    set the class of Input to `inputstyle`
    create Comment in Input
    set the style of Comment to `width:100%`
    put property `comment` of Record into Item
    if Item is not empty set the content of Comment to Item

    create Buttons in Form
    set the style of Buttons to
    	`text-align:center;margin-top:0.5em;border-top:1px solid lightgray;padding-top:0.5em`

	create SaveRecordButton in Buttons
    if Mode is `new`
    begin
    	put now into ID
        set property `id` of Record to ID
    	set the text of SaveRecordButton to `Create`
    end
    else set the text of SaveRecordButton to `Save`
    on click SaveRecordButton
    begin
    	if GivenName is empty go to MissingData
    	if FamilyName is empty go to MissingData
        ! Write the record
        set property `gname` of Record to GivenName
        set property `oname` of Record to OtherNames
        set property `fname` of Record to FamilyName
        if attribute `checked` of GenderM put `m` into G
        else if attribute `checked` of GenderF put `f` into G
        else put `o` into G
        set property `gender` of Record to G
        put DOB into D
        run ISODateScript with D
        set property `dob` of Record to D   
        put DOD into D
        run ISODateScript with D 
        set property `dod` of Record to D
        set property `pob` of Record to POB
        set property `comment` of Record to Comment
        rest post Record to `save/map/` cat ID cat `.json`
        alert `Record for '` cat GivenName cat ` ` cat FamilyName cat `' saved`
        set the text of SaveRecordButton to `Save`
    end
    
    create ViewRecordButton in Buttons
    set the style of ViewRecordButton to `margin-left:0.5em`
    set the text of ViewRecordButton to `View record`
    on click ViewRecordButton
    begin
    	gosub to StopChildModules
        go to ViewRecord
    end
    
    create NewRecordButton in Buttons
    set the style of NewRecordButton to `margin-left:0.5em`
    set the text of NewRecordButton to `New record`
    on click NewRecordButton
    begin
    	gosub to StopChildModules
        go to NewRecord
    end
    
    create CloseButton in Buttons
    set the style of CloseButton to `margin-left:0.5em`
    set the text of CloseButton to `Close`
    on click CloseButton
    begin
    	gosub to StopChildModules
        go to ViewRecord
    end

	set ready
	stop

ViewRecord:
	clear Message
    set property `action` of Message to `view`
    set property `id` of Message to ID
    send Message to parent
	exit

NewRecord:
    clear Record
    put `new` into Mode
    go to ER2

MissingData:
	alert `Please complete all starred fields.`
    stop

StopChildModules:
	send `exit` to ParentsModule
	send `exit` to ChildrenModule
    return
